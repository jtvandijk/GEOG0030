{"title":"R for Spatial Analysis","markdown":{"headingText":"R for Spatial Analysis","containsRefs":false,"markdown":"This week's lecture offered a comprehensive introduction to the Geocomputation module, highlighting how and why it differs from a traditional GIScience course. In this week's tutorial, we will introduce you to using R and RStudio for quantitative spatial data, focusing specifically on how R can be used to make maps.\n\n## Lecture slides\nYou can download the slides of this week's lecture here: [[Link]]({{< var slides.week01 >}}).\n\n## Reading list \n#### Essential readings {.unnumbered}\n- Brundson, C. and Comber, A. 2020. Opening practice: Supporting reproducibility and critical spatial data science. *Journal of Geographical Systems* 23: 477–496. [[Link]](https://doi.org/10.1007/s10109-020-00334-2)\n- Longley, P. *et al.* 2015. Geographic Information Science & Systems, **Chapter 1**: *Geographic Information: Science, Systems, and Society*, pp. 1-32. [[Link]](https://ucl.rl.talis.com/link?url=https%3A%2F%2Fapp.knovel.com%2Fhotlink%2Ftoc%2Fid%3AkpGISSE001%2Fgeographic-information-science%3Fkpromoter%3Dmarc&sig=e437927b963cc591dcb65491eccdd3869cc31aef80e1443cb2ba12d8f3bb031a)\n\n#### Suggested readings {.unnumbered}\n- Miller, H. and Goodchild, M. 2015. Data-driven geography. *GeoJournal* 80: 449–461. [[Link]](https://doi.org/10.1007/s10708-014-9602-6)\n- Goodchild, M. 2009. Geographic information systems and science: Today and tomorrow. *Annals of GIS* 15(1): 3-9. [[Link]](https://doi.org/10.1080/19475680903250715)\n\n## Europeans in London\nIn RStudio, scripts allow us to build and save code that can be run repeatedly. We can organise these scripts into [RStudio projects](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects), which consolidate all files related to an analysis such as input data, R scripts, results, figures, and more. This organisation helps keep track of all data, input, and output, while enabling us to create standalone scripts for each part of our analysis. Additionally, it simplifies managing [directories and filepaths](https://en.wikipedia.org/wiki/Path_(computing)) and allows us to keep track of our installed packages through [renv](https://rstudio.github.io/renv/articles/renv.html).\n\n::: {.callout-note}\nPackage management in R involves handling the installation, updating, and tracking of external libraries needed for your code. This ensures that your R scripts can run smoothly without issues related to missing or incompatible packages. Within an RStudio project, you can use `renv` to create a reproducible environment by capturing the specific package versions used in the project. This means that anyone working on or revisiting the project will have access to the same package setup, preventing problems caused by package updates or changes. \n:::\n\nNavigate to **File** -> **New Project** -> **New Directory**, and create a folder with the name `GEOG0030`. Tick the checkbox for *Use renv with this project* and click on **Create Project**. You should now see your main RStudio window switch to this new project and when you check your **files** pane, you should see a new **R Project** called `GEOG0030`.\n  \n::: {.callout-warning}\nPlease ensure that **folder names** and **file names** do not contain spaces or special characters such as `*` `.` `\"` `/` `\\` `[` `]` `:` `;` `|` `=` `,` `<` `?` `>` `&` `$` `#` `!` `'` `{` `}` `(` `)`. Different operating systems and programming languages deal differently with spaces and special characters and as such including these in your folder names and file names can cause many problems and unexpected errors. As an alternative to using white space you can use an underscore (`_`) or hyphen (`-`) if you like.\n:::\n\nWith our project ready to go, today we will map the distribution of the share of European immigrants across London. The data covers the number of people residing in London that are born in a European country, as recorded in the 2021 Census for England and Wales, aggregated at the [Middle Layer Super Output Area (MSOA)](https://www.ons.gov.uk/methodology/geography/ukgeographies/censusgeographies/census2021geographies) level.\n\n::: {.callout-note}\nAn MSOA is a geographic unit used in the UK for statistical analysis. It typically represents small areas with populations of around 5,000 to 15,000 people and is designed to ensure consistent data reporting. MSOAs are commonly used to report on census data, deprivation indices, and other socio-economic statistics.\n:::\n\nThe dataset has been extracted using the [Custom Dataset Tool](https://www.ons.gov.uk/datasets/create), and you can download the file via the link provided below. Save the file in your project folder under `data/attributes`. Along with this dataset, we also have access to a `GeoPackage` that contains the MSOA boundaries. Save this file under `data/spatial`, respectively.\n\n::: {.callout-note}\nYou will to have created a folder named `data` within your RStudio Project directory, inside which you will have to have a folder named `attributes` and a folder named `spatial`.\n:::\n\n| File                                        | Type   | Link |\n| :------                                     | :------| :------ |\n| London MSOA Census 2021 European Population | `csv` | [Download](https://github.com/jtvandijk/GEOG0030/tree/master/data/attributes/London-MSOA-European.csv) |\n| London MSOA 2021 Spatial Boundaries         | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0030/raw/refs/heads/main/data/spatial/London-MSOA-2021.gpkg) |\n\n::: {.callout-tip}\nTo download a `csv` file that is hosted on GitHub, click on the `Download raw file` button on the top right of your screen and it should download directly to your computer.\n:::\n\n::: {.callout-note}\nYou may have used spatial data before and noticed that we did not download a collection of files known as a `shapefile` but a `GeoPackage` instead. Whilst `shapefiles` are still being used, `GeoPackage` is a more modern and portable file format. Have a look at this article on *towardsdatascience.com* for an excellent explanation on why one should use `GeoPackage` files over `shapefiles` where possible: [[Link]](https://towardsdatascience.com/why-you-need-to-use-geopackage-files-instead-of-shapefile-or-geojson-7cb24fe56416)\n:::\n\nTo get started, let us create our first script. **File** -> **New File** -> **R Script**. Save your script as `w01-european-population-london.r`. \n\nWe will start by loading the libraries that we will need:\n\n```{r}\n#| label: 01-load-libraries\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| output: False\n#| tidy: True\n#| filename: \"R code\"\n# load libraries\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tmap)\n```\n\n::: {.callout-warning}\nYou may have to install some of these libraries if you have not used these before.\n:::\n\n::: {.callout-warning}\nFor Linux and macOS users who are new to working with spatial data in R, the installation of the `sf` library may fail because additional (non-R) libraries are required which are automatically installed for Windows users. If you encounter installation issues,, please refer to the [information pages](https://r-spatial.github.io/sf/#macos) of the `sf` library for instructions on how to install these additional libraries.\n:::\n\nOnce downloaded, we can load both files into memory:\n```{r}\n#| label: 01-load-gpkg-csv\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# read spatial dataset\nmsoa21 <- st_read('data/spatial/London-MSOA-2021.gpkg')\n\n# load attribute dataset\nmsoa_eur <- read_csv('data/attributes/London-MSOA-European.csv')\n\n# inspect\nhead(msoa21)\n\n# inspect\nhead(msoa_eur)\n``` \n\n::: {.callout-note}\nYou can further inspect both objects using the `View()` function. \n:::\n\n### Exploring spatial data\nThe first thing we want to do when we load spatial data is to plot the data to check whether everything is in order. To do this, we can simply use the base R `plot()` function\n\n```{r}\n#| label: fig-01-plot-map-data\n#| fig-cap: Quick plot to inspect the MSOA spatial data.\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| cache: True\n#| filename: \"R code\"\n# plot data\nplot(msoa21, max.plot = 1)\n``` \n\nYou should see your `msoa21` plot appear in your **Plots** window.\n\n::: {.callout-warning}\nThe `plot()` function should not to be used to make publishable maps but can be used as a quick way of inspecting your spatial data.\n:::\n\nJust as with a tabular dataframe, we can also inspect the attributes of the spatial data frame:\n\n```{r}\n#| label: 01-inspect-data-msoa\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: \"R code\"\n# inspect columns\nncol(msoa21)\n\n# inspect rows\nnrow(msoa21)\n\n# inspect data\nhead(msoa21)\n\n# inspect column names\nnames(msoa21)\n```\n\nWe can also establish the class of our data:\n\n```{r}\n#| label: 01-class-data-msoa\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: \"R code\"\n# inspect\nclass(msoa21)\n``` \n\nWe should see our data is an `sf` dataframe, which is what we want and we can move on.\n\n### Joining attribute data\nNow we have our dataset containing London's European born population and the MSOA spatial boundaries loaded, we can join these together using an **Attribute Join**. Before proceeding with the join, we need to verify that a matching unique identifier exists in both datasets. Let's look at the column names in our datasets again:\n\n```{r}\n#| label: 01-names-att-join\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: \"R code\"\n# inspect column names\nnames(msoa21)\n\n# inspect column names\nnames(msoa_eur)\n``` \n\nThe `msoa21cd` columns looks promising as it features in both datasets. We can quickly sort both columns and have a peek at the data:\n\n```{r}\n#| label: 01-sort-att-join\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: \"R code\"\n# inspect spatial dataset\nhead(sort(msoa21$msoa21cd))\n\n# inspect attribute dataset\nhead(sort(msoa_eur$msoa21cd))\n``` \n\nThey seem to contain similar values, so that is promising. Let us try to join the attribute data onto the spatial data:\n\n```{r}\n#| label: 01-join-att\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: False\n#| filename: \"R code\"\n# join attribute data onto spatial data\nmsoa21 <- msoa21 |> \n  left_join(msoa_eur, by = c(\"msoa21cd\" = \"msoa21cd\"))\n``` \n\n::: {.callout-note}\nThe code above uses a pipe function: `|>`. The pipe operator allows you to pass the output of one function directly into the next, streamlining your code. While it might be a bit confusing at first, you will find that it makes your code faster to write and easier to read. More importantly, it reduces the need to create multiple intermediate variables to store outputs.\n:::\n\nWe can explore the joined data in usual fashion:\n\n```{r}\n#| label: 01-inspect-join\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: \"R code\"\n# inspect columns\nncol(msoa21)\n\n# inspect rows\nnrow(msoa21)\n\n# inspect data\nhead(msoa21)\n\n# inspect column names\nnames(msoa21)\n```\n\nAlways inspect your join to ensure everything looks as expected. A good way to do this is by using the `View()` function to check for any unexpected missing values, which are marked as `NA`. \n\nWe can further compare the total number of rows in the spatial dataset with the total number of non-`NA` values in the joined columns:\n\n```{r}\n#| label: 01-inspect-na\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: \"R code\"\n# inspect\nnrow(msoa21)\n\n# check for missing values\nsum(!is.na(msoa21$eur21))\n\n# check for missing values\nsum(!is.na(msoa21$pop21))\n```\n\nNo missing values. In this case we did not expect any missing values, so this confirms that all our full attribute dataset has been linked to the spatial dataset. \n\nWe are almost ready to map the data. Only thing that is left is for us to calculate the share of European-born immigrants within each MSOA:\n\n```{r}\n#| label: 01-european-prop\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: \"R code\"\n# calculate proportion\nmsoa21 <- msoa21 |>\n  mutate(prop_eur21 = eur21 / pop21)\n```\n\n### Mapping spatial data\nFor our map-making, we will use one of the two primary visualisation libraries for spatial data: `tmap.` `tmap` offers a flexible, layer-based approach that makes it easy to create various types of thematic maps, such as choropleths and proportional symbol maps. One of the standout features of `tmap` is its quick plotting function, `qtm()`, which allows you to generate basic maps with minimal effort.\n\n```{r}\n#| label: fig-01-qtm\n#| fig-cap: Quick thematic map. \n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: \"R code\"\n# quick thematic map\nqtm(msoa21, fill=\"prop_eur21\")\n``` \n\nIn this case, the `fill()` argument in `tmap` is how we instruct the library to create a choropleth map based on the values in the specified column. If we set `fill()` to `NULL`, only the borders of our polygons will be drawn, without any colour fill. The `qtm()` function in tmap is versatile, allowing us to pass various parameters to customise the aesthetics of our map. By checking the function's documentation, you can explore the full list of available parameters. For instance, to set the borders of our Cape Town polygons to white, we can use the `borders` parameter:\n\n\n```{r}\n#| label: fig-01-qtm-borders\n#| fig-cap: Quick thematic map with white borders.\n#| echo: True\n#| eval: True\n#| tidy: True\n#| out.width: \"100%\"\n#| filename: \"R code\"\n# quick thematic map \nqtm(msoa21, fill=\"prop_eur21\", borders = \"white\")\n``` \n\nThe map does not look quite right yet. While we can continue tweaking parameters in the `qtm()` function to improve it, `qtm()` is somewhat limited in its functionality and is primarily intended for quickly inspecting your data and creating basic maps. For more complex and refined map-making with the `tmap` library, it is better to use the main plotting method that starts with the `tm_shape()` function. \n\n::: {.callout-note}\nThe primary approach to creating maps in `tmap` involves using a [layered grammar of graphics](https://towardsdatascience.com/a-comprehensive-guide-to-the-grammar-of-graphics-for-effective-visualization-of-multi-dimensional-1f92b4ed4149) to build up your map, starting with the `tm_shape()` function. This function, when provided with a spatial dataframe, captures the spatial information of your data, including its projection and geometry, and creates a spatial object. While you can override certain aspects of the spatial data (such as its projection) using the function's parameters, the essential role of `tm_shape()` is to instruct R to \"use this object as the basis for drawing the shapes.\" \n\nTo actually render the shapes, you need to add a layer that specifies the type of shape you want R to draw from this spatial information—such as polygons for our data. This layer function tells R to \"draw my spatial object as `X`\", where `X` represents the type of shape. Within this layer, you can also provide additional details to control how R draws your shapes. Further, you can add more layers to include other spatial objects and their corresponding shapes on your map. Finally, layout options can be specified through a layout layer, allowing you to customise the overall appearance and arrangement of your map.\n:::\n\nLet us build a map using `tmap`:\n\n```{r tidy='styler'}\n#| label: fig-01-choro-0\n#| fig-cap: Building up a map layer by layer.\n#| echo: True\n#| eval: True\n#| tidy: True\n#| cache: True\n#| filename: \"R code\"\n# shape, polygons\ntm_shape(msoa21) +\n  tm_polygons()\n```\n\nAs you can now see, we have mapped the spatial polygons of our `msoa21` spatial dataframe. However, this is not quite the map we want; we need a choropleth map where the polygons are colored based on the proportion of European immigrants. To achieve this, we use the `col` parameter within the `tm_polygons()` function.\n\n::: {.callout-tip}\nThe `col` parameter within `tm_polygons()` allows you to fill polygons with colours based on:\n\n- A single colour value (e.g. `red`).\n- The name of a data variable within the spatial data file. This variable can either contain specific colour values or numeric/categorical values that will be mapped to a colour palette.\n:::\n\nLet us go ahead and pass our `prop_eur21` variable within the `col()` parameter and see what we get:\n\n```{r tidy='styler'}\n#| label: fig-01-choro-1\n#| fig-cap: Building up a map layer by layer.\n#| echo: True\n#| eval: True\n#| cache: True\n#| filename: \"R code\"\n\n# shape, polygons\ntm_shape(msoa21) +\n  # specify column\n  tm_polygons(\n    col = \"prop_eur21\"\n  )\n```\n\nWe are making progress, but there are two immediate issues with our map. First, the classification breaks do not adequately reflect the variation in our dataset. By default, `tmap` uses *pretty* breaks, which may not be the most effective for our data. An alternative, such as natural breaks (or jenks), might better reveal the data's variation.\n\nTo customise the classification breaks, refer to the `tm_polygons()` documentation. The following parameters are relevant:\n\n| Parameter  | Description |\n| :-         | :------ |\n| `n`        | Specifies the number of classification breaks. |\n| `style`    | Defines the method for classification breaks, such as fixed, standard deviation, equal, or quantile. |\n| `breaks`   | Allows you to set specific numeric breaks when using the fixed style. |\n\nFor example, if we want to adjust our choropleth map to use five classes determined by the natural breaks method, we need to add the `n` and `style` parameters to our `tm_polygons()` layer:\n\n```{r tidy='styler'} \n#| label: fig-01-choro-2\n#| fig-cap: Building up a map layer by layer.\n#| echo: True\n#| eval: True\n#| cache: True\n#| filename: \"R code\"\n# shape, polygons\ntm_shape(msoa21) +\n  # specify column, classes\n  tm_polygons(\n              col = \"prop_eur21\", \n              n = 5, \n              style = \"jenks\"\n              )\n``` \n\n## Styling spatial data\nStyling a map in `tmap` requires a deeper understanding and familiarity with the library, which is something you will develop best through hands-on practice. Here are the key functions to be aware of:\n\n| Function          | Description |\n| :-                | :------ |\n| `tm_layout()`     | Customise titles, fonts, legends, and other layout elements. |\n| `tm_compass()`    | Add and style a North arrow or compass. |\n| `tm_scale_bar()`  | Add and style a scale bar. |\n\nTo begin styling your map, explore each of these functions and their parameters. Through trial and error, you can tweak and refine the map until you achieve the desired look:\n\n```{r tidy='styler'} \n#| label: fig-01-choro-3\n#| fig-cap: Building up a map layer by layer.\n#| echo: True\n#| eval: True\n#| cache: True\n#| filename: \"R code\"\n# shape, polygons\ntm_shape(msoa21) +\n\n  # specify column, classes, labels, title\n  tm_polygons(\n          col= 'prop_eur21', n = 5, style = 'jenks',\n          border.col = '#ffffff',\n          border.alpha = 0.3,\n          palette = c('#feebe2','#fbb4b9','#f768a1','#c51b8a','#7a0177'), \n          labels = c('Largest share', '2nd largest', '3rd largest', '4th largest', 'Smallest share'),\n          title = 'Share of population',\n          textNA = 'No population'\n  ) +\n  \n  # set layout\n  tm_layout(\n    main.title = 'Share of population born in Europe',\n    main.title.size = 0.9,\n    main.title.position = c('right', 'top'),\n    legend.outside = FALSE,\n    legend.position = c('right', 'top'),\n    legend.title.size = 0.7,\n    legend.title.fontface = 'bold',\n    legend.text.size = 0.5,\n    frame = FALSE,\n    inner.margins = c(0.05,0.05,0.05,0.05),\n    fontfamily = 'Helvetica'\n  ) +\n  \n  # add North arrow\n  tm_compass(\n    type = 'arrow',\n    position = c('left', 'top'),\n    size = 1,\n    text.size = 0.7\n  ) +\n  \n  # add scale bar\n  tm_scale_bar(\n    breaks = c(0, 5, 10, 15, 20),\n    position = c('right', 'bottom'),\n    text.size = 0.4\n  ) \n\n``` \n\nWe can also have some map labels, if we want, by extracting centroids from selected polygons and adding these as separate map layer:\n\n```{r tidy='styler'} \n#| label: fig-01-choro-4\n#| fig-cap: Building up a map layer by layer.\n#| echo: True\n#| eval: True\n#| cache: True\n#| filename: \"R code\"\n\n# map labels\nlab <- msoa21 |> \n  filter(msoa21cd == 'E02000642' | msoa21cd == 'E02000180') |> st_centroid()\n\n# map object\nlon_eurpop <- \n\n# shape, polygons\ntm_shape(msoa21) +\n\n  # specify column, classes, labels, title\n  tm_polygons(\n          col= 'prop_eur21', n = 5, style = 'jenks',\n          border.col = '#ffffff',\n          border.alpha = 0.3,\n          palette = c('#feebe2','#fbb4b9','#f768a1','#c51b8a','#7a0177'), \n          labels = c('Largest share', '2nd largest', '3rd largest', '4th largest', 'Smallest share'),\n          title = 'Share of population',\n          textNA = 'No population'\n  ) +\n  \n  # label centroids\n  tm_shape(lab) +\n  \n  # add points\n  tm_dots(size = 0.4, col= '#000000') +\n  \n  # add labels\n  tm_text(text='msoa21nm', xmod = 0, ymod = -0.6, col = '#000000', size = 0.8) +\n  \n  # set layout\n  tm_layout(\n    main.title = 'Share of population born in Europe',\n    main.title.size = 0.9,\n    main.title.position = c('right', 'top'),\n    legend.outside = FALSE,\n    legend.position = c('right', 'top'),\n    legend.title.size = 0.7,\n    legend.title.fontface = 'bold',\n    legend.text.size = 0.5,\n    frame = FALSE,\n    inner.margins = c(0.05,0.05,0.05,0.05),\n    fontfamily = 'Helvetica'\n  ) +\n  \n  # add North arrow\n  tm_compass(\n    type = 'arrow',\n    position = c('left', 'top'),\n    size = 1,\n    text.size = 0.7\n  ) +\n  \n  # add scale bar\n  tm_scale_bar(\n    breaks = c(0, 5, 10, 15, 20),\n    position = c('right', 'bottom'),\n    text.size = 0.4\n  ) +\n  \n  # add credits\n  tm_credits('Data source: Census 2021, Office for National Statistics',\n             fontface = 'italic', \n             position = c('left', 'bottom'),\n             size = 0.4)\n\n# plot\nlon_eurpop\n```\n\nIn the code above, we stored the full map definition as an object. This makes it easy to export the map and save it as a `.jpg`, `.png` or `.pdf` file:\n\n```{r}\n#| label: 01-export-map\n#| classes: styled-output\n#| echo: True\n#| eval: False\n#| tidy: True\n#| filename: \"R code\"\n# write map\ntmap_save(tm = lon_eurpop, filename = 'london-european-population.jpg', width=15, height=15, units=c('cm'))\n```\n\n## Assignment \nNow that we have prepared our dataset and created our initial maps in R, we can also try and map the distribution of the proportion of European immigrants across Wales and experiment with different mapping parameters. Follow these steps:\n\n1. Download the two datasets provided below and save them in the appropriate subfolder within your `data` directory. The datasets include:\n    * A `csv` file containing the number of people residing in Wales that are born in a European country, as recorded in the 2021 Census for England and Wales, aggregated at the MSOA level.\n    * A `GeoPackage` file containing the 2021 MSOA spatial boundaries for England and Wales.\n2. Load both datasets and merge them together. Make sure to only retain those MSOAs that belong to Wales.\n3. Create a map that shows the proportion of the population residing in Wales that is born in Europe.\n4. Experiment by adjusting various map parameters, such as the colour scheme, map labels, and data classification method.\n\n| File                                        | Type   | Link |\n| :------                                     | :------| :------ |\n| Wales MSOA Census 2021 European Population | `csv` | [Download](https://github.com/jtvandijk/GEOG0030/tree/master/data/attributes/Wales-MSOA-European.csv) |\n| London MSOA 2021 Spatial Boundaries         | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0030/raw/refs/heads/main/data/spatial/England-Wales-MSOA-2021.gpkg) |\n\n## Before you leave\nAnd that is how you use R as a GIS in its most basic form. More RGIS in the coming weeks, but [this concludes the tutorial for this week](https://www.youtube.com/watch?v=Ydg4T2MP7Z8).","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["assets/styles.css"],"toc":true,"toc-depth":3,"highlight-style":"atom-one","number-sections":true,"output-file":"01-spatial.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"source","_quarto-vars":{"meta":{"title":"GEOG0030"},"urls":{"w01":"01-spatial.html","w02":"02-operations.html","w03":"03-point-pattern.html","w04":"04-autocorrelation.html","w05":"05-models.html","w06":"06-raster.html","w07":"07-geodemographics.html","w08":"08-network.html","w09":"09-datavis.html","w10":"10-maps.html"},"slides":{"week01":"https://github.com/jtvandijk/GEOG0030/tree/master/slides/w01-geo.pdf","week02":"https://github.com/jtvandijk/GEOG0030/tree/master/slides/w02-geo.pdf","week03":"https://github.com/jtvandijk/GEOG0030/tree/master/slides/w03-geo.pdf","week04":"https://github.com/jtvandijk/GEOG0030/tree/master/slides/w04-geo.pdf","week05":"https://github.com/jtvandijk/GEOG0030/tree/master/slides/w05-geo.pdf","week06":"https://github.com/jtvandijk/GEOG0030/tree/master/slides/w06-geo.pdf","week07":"https://github.com/jtvandijk/GEOG0030/tree/master/slides/w07-geo.pdf","week08":"https://github.com/jtvandijk/GEOG0030/tree/master/slides/w08-geo.pdf","week09":"https://github.com/jtvandijk/GEOG0030/tree/master/slides/w09-geo.pdf","week10":"https://github.com/jtvandijk/GEOG0030/tree/master/slides/w10-geo.pdf"}},"theme":{"light":"flatly","dark":"darkly"},"callout-appearance":"simple","smooth-scroll":true,"number-depth":4,"pagetitle":"{{< var meta.title >}}"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}