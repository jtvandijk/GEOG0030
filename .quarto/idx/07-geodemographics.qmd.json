{"title":"Geodemographic Classification","markdown":{"headingText":"Geodemographic Classification","containsRefs":false,"markdown":"This week we will turn to geodemographic classification. Geodemographic classification is a method used to categorise geographic areas and the people living in them based on demographic, socioeconomic, and sometimes lifestyle characteristics. This approach combines geographic information with demographic data to create profiles of different neighborhoods.\n\n## Lecture slides\nYou can download the slides of this week's lecture here: [[Link]]({{< var slides.week07 >}}).\n\n## Reading list \n#### Essential readings {.unnumbered}\n- Dalton, C. M. and Thatcher. J. 2015. Inflated granularity: Spatial \"Big Data\" and geodemographics. *Big Data & Society* 2(2): 1-15. [[Link]](https://doi.org/10.1177/2053951715601144)\n- Longley, P. A. 2012. Geodemographics and the practices of geographic information science. *International Journal of Geographical Information Science* 26(12): 2227-2237. [[Link]](https://doi.org/10.1080/13658816.2012.719623)\n- Wyszomierski, J., Longley, P. A., and Singleton, A. *et al.* 2024. A neighbourhood Output Area Classification from the 2021 and 2022 UK censuses. *The Geographical Journal*. 190(2): e12550. [[Link]](https://doi.org/10.1111/geoj.12550)\n\n#### Suggested readings {.unnumbered}\n- Fränti, P. and Sieronoja, S. 2019. How much can k-means be improved by using better initialization and repeats? *Pattern Recognition* 93: 95-112. [[Link]](https://doi.org/10.1016/j.patcog.2019.04.014)\n- Singleton, A. and Longley, P. A. 2024. Classifying and mapping residential structure through the London Output Area Classification. *Environment and Planning B: Urban Analytics and City Science* 51(5): 1153-1164. [[Link]](https://doi.org/10.1177/23998083241242913)\n- Singleton, A. and Spielman, S. 2014. The past, present, and future of geodemographic research in the United States and United Kingdom. *The Professional Geographer* 66(4): 558-567. [[Link]](https://doi.org/10.1080/00330124.2013.848764)\n\n## Classifying London\nToday, we will create our own geodemographic classification to examine demographic clusters across London, drawing inspiration from [London Output Area Classification](https://doi.org/10.1177/23998083241242913). Specifically, we will try to identify clusters based on age group, self-identified ethnicity, country of birth, and first or preferred language. \n\nThe data covers all usual residents, as recorded in the 2021 Census for England and Wales, aggregated at the [Lower Super Output Area (LSOA)](https://www.ons.gov.uk/methodology/geography/ukgeographies/censusgeographies/census2021geographies) level. These datasets have been extracted using the [Custom Dataset Tool](https://www.ons.gov.uk/datasets/create), and you can download each file via the links provided below. A copy of the 2021 London LSOAs spatial boundaries is also available. Save these files in your project folder under `data`.\n\n| File                                        | Type   | Link |\n| :------                                     | :------| :------ |\n| London LSOA Census 2021 Age Groups          | `csv` | [Download](https://github.com/jtvandijk/GEOG0030/tree/master/data/attributes/London-LSOA-AgeGroup.csv) |\n| London LSOA Census 2021 Country of Birth    | `csv` | [Download](https://github.com/jtvandijk/GEOG0030/tree/master/data/attributes/London-LSOA-Country-of-Birth.csv) |\n| London LSOA Census 2021 Ethnicity           | `csv` | [Download](https://github.com/jtvandijk/GEOG0030/tree/master/data/attributes/London-LSOA-Ethnicity.csv) |\n| London LSOA Census 2021 Main Language       | `csv` | [Download](https://github.com/jtvandijk/GEOG0030/tree/master/data/attributes/London-LSOA-MainLanguage.csv) |\n| London LSOA 2021 Spatial Boundaries         | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0030/raw/refs/heads/main/data/spatial/London-LSOA-2021.gpkg) |\n\n::: {.callout-tip}\nYou may have already downloaded some of these datasets in previous weeks, but for completeness, they are all provided here. Only download the datasets you do not already have or did not save.\n:::\n\nOpen a new script within your `GEOG0030` project and save this as `w07-geodemographic-classification.r`. \n\nBegin by loading the necessary libraries:\n\n```{r}\n#| label: 07-options\n#| echo: False\n#| eval: True\n#| output: False\n# max print\noptions(max.print = 50)\n```\n\n```{r}\n#| label: 07-load-libraries\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| output: False\n#| tidy: True\n#| filename: 'R code'\n# load libraries\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(ggcorrplot)\nlibrary(cluster)\nlibrary(factoextra)\nlibrary(sf)\nlibrary(tmap)\n```\n\n::: {.callout-warning}\nYou may have to install some of these libraries if you have not used these before.\n:::\n\nNext, we can load the individual `csv` files that we downloaded into R.\n\n```{r}\n#| label: 07-load-data\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# load age data\nlsoa_age <- read_csv('data/attributes/London-LSOA-AgeGroup.csv')\n\n# load country of birth data\nlsoa_cob <- read_csv('data/attributes/London-LSOA-Country-of-Birth.csv')\n\n# load ethnicity data\nlsoa_eth <- read_csv('data/attributes/London-LSOA-Ethnicity.csv')\n\n# load language data\nlsoa_lan <- read_csv('data/attributes/London-LSOA-MainLanguage.csv')\n```\n\n::: {.callout-warning}\nIf using a Windows machine, you may need to substitute your forward-slashes (`/`) with two backslashes (`\\\\`) whenever you are dealing with file paths.\n:::\n\nNow, carefully examine each individual dataframe to understand how the data is structured and what information it contains.\n\n```{r}\n#| label: 07-inspect-data\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# inspect age data\nhead(lsoa_age)\n\n# inspect country of birth data\nhead(lsoa_cob)\n\n# inspect ethnicity data\nhead(lsoa_eth)\n\n# inspect language data\nhead(lsoa_lan)\n```\n\n::: {.callout-tip}\nYou can further inspect the results using the `View()` function. \n:::\n\n### Variable preparation\nTo identify geodemographic clusters in our dataset, we will use a technique called $k$-means. $k$-means aims to partition a set of standardised observations into a specified number of clusters ($k$). To do this we first need to prepare the individual datasets, as well as transform and standardise the input variables.\n\n::: {.callout-note}\n$k$-means clustering is an unsupervised machine learning algorithm used to group data into a predefined number of clusters, based on similarities between data points. It works by initially assigning $k$ random centroids, then iteratively updating them by assigning each data point to the nearest centroid and recalculating the centroid's position based on the mean of the points in each cluster. The process continues until the centroids stabilise, meaning they no longer change significantly. $k$-means is often used for tasks such as data segmentation, image compression, or anomaly detection. It is simple but may not work well with non-spherical or overlapping clusters.\n:::\n\nBecause all the data are stored in [long format](https://towardsdatascience.com/long-and-wide-formats-in-data-explained-e48d7c9a06cb), with each London LSOA appearing on multiple rows for each category — such as separate rows for different age groups, ethnicities, countries of birth, and first or preferred languages - we need to transform it into a [wide format](https://towardsdatascience.com/long-and-wide-formats-in-data-explained-e48d7c9a06cb). For example, instead of having multiple rows for an LSOA showing counts for different age groups all the information for each LSOA will be consolidated into a single row. Additionally, we will clean up the column names to follow standard R naming conventions and make the data easier to work with. Like we have done previously, we can automate this process using the `janitor` package.\n\nWe will begin with the `age` dataframe:\n\n```{r}\n#| label: 07-reformat-data-age\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# clean names \nlsoa_age <- lsoa_age |>\n  clean_names()\n\n# pivot\nlsoa_age <- lsoa_age |>\n  pivot_wider(id_cols = 'lower_layer_super_output_areas_code',\n              names_from = 'age_5_categories',\n              values_from = 'observation') \n\n# clean names\nlsoa_age <- lsoa_age |>\n  clean_names()\n```\n\n::: {.callout-note}\nIf your `clean_names()` function returns an error, it is likely due to a conflict with another library that also includes a `clean_names()` function. In such cases, R cannot determine which one to use. To resolve this, you can specify the library explicitly by using `janitor::clean_names()`.\n:::\n\nTo account for the non-uniformity of the areal units, we further need to convert the observations to proportions and only retain those columns that are likely to be meaningful in the context of the classification:\n\n```{r}\n#| label: 07-prop-data-age\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# total observations\nlsoa_age <- lsoa_age |>\n  rowwise() |>\n  mutate(age_pop = sum(across(2:6)))\n\n# total proportions, select columns\nlsoa_age <- lsoa_age |>\n  mutate(across(2:6, ~ . / age_pop)) |>\n  select(1:6)\n\n# inspect\nhead(lsoa_age)\n```\n\nThis looks much better. We can do the same for the country of `birth` data:\n\n```{r}\n#| label: 07-reformat-cob-data\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# prepare country of birth data\nlsoa_cob <- lsoa_cob |>\n  clean_names() |>\n  pivot_wider(id_cols = 'lower_layer_super_output_areas_code',\n              names_from = 'country_of_birth_8_categories',\n              values_from = 'observation') |>\n  clean_names()\n\n# proportions, select columns\nlsoa_cob <- lsoa_cob |>\n  rowwise() |>\n  mutate(cob_pop = sum(across(2:9))) |>\n  mutate(across(2:9, ~ . / cob_pop )) |>\n  select(-2,-10)\n```\n\nAnd we can do the same for the `ethnicity` and `language` datasets:\n\n```{r}\n#| label: 07-reformat-eth-lan-data\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# prepare ethnicity data\nlsoa_eth <- lsoa_eth |>\n  clean_names() |>\n  pivot_wider(id_cols = 'lower_layer_super_output_areas_code',\n              names_from = 'ethnic_group_20_categories',\n              values_from = 'observation') |>\n  clean_names()\n\n# proportions, select columns\nlsoa_eth <- lsoa_eth |>\n  rowwise() |>\n  mutate(eth_pop = sum(across(2:21))) |>\n  mutate(across(2:21, ~ . / eth_pop )) |>\n  select(-2,-22)\n\n# prepare language data\nlsoa_lan <- lsoa_lan |>\n  clean_names() |>\n  pivot_wider(id_cols = 'lower_layer_super_output_areas_code',\n              names_from = 'main_language_11_categories',\n              values_from = 'observation') |>\n  clean_names()\n\n# proportions, select columns\nlsoa_lan <- lsoa_lan |>\n  rowwise() |>\n  mutate(lan_pop = sum(across(2:12))) |>\n  mutate(across(2:12, ~ . / lan_pop )) |>\n  select(-2,-11,-13)\n```\n\nWe now have four separate datasets, each containing the proportions of usual residents classified into different groups based on age, country of birth, ethnicity, and language.\n\n### Variable selection\nWhere we initially selected variables from different demographic domains, not all variables may be suitable for inclusion. Firstly, the variables need to exhibit sufficient heterogeneity to ensure they capture meaningful differences between observations. Secondly, variables should not be highly correlated with one another, as this redundancy can skew the clustering results. Ensuring acceptable correlation between variables helps maintain the diversity of information and improves the robustness of the clustering outcome.\n\n::: {.callout-warning}\nVariable selection is often a time-consuming process that requires a combination of domain knowledge and more extensive exploratory analysis than is covered in this practical.\n:::\n\nA straightforward yet effective method to examine the distribution of our variables is to create boxplots for each variable. This can be efficiently achieved by using `facet_wrap()` from the `ggplot2` library to generate a matrix of panels, allowing us to visualise all variables in a single view. \n\n::: {.callout-note}\n`ggplot2` is a popular data visualisation package in R, designed for creating complex plots. It uses the [Grammar of Graphics](https://towardsdatascience.com/a-comprehensive-guide-to-the-grammar-of-graphics-for-effective-visualization-of-multi-dimensional-1f92b4ed4149) to build layered, customisable graphics by mapping data to visual elements like colour, size, and shape. We will explore the `ggplot2` library further in [Weeks 9 and 10](09-maps.html). In the meantime, you can refer to the [ggplot2 documentation](https://ggplot2.tidyverse.org/reference/facet_wrap.html) for more details on `facet_wrap()`.\n:::\n\n```{r}\n#| label: fig-07-boxplot-data\n#| fig-cap: Boxplots of the distribution of the `age` dataset.\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# wide to long\nlsoa_age_wd <- lsoa_age |>\n  pivot_longer(cols = c(2:5), names_to = 'agegroup', values_to = 'count')\n\n# facet age\nggplot(lsoa_age_wd, aes(y = count)) +\n  geom_boxplot() +\n  facet_wrap(~agegroup, ncol = 2) +\n  theme_minimal() +\n  ylab('')\n```\n\nWhen repeating this process for the `birth`, `ethnicity`, and `language` variables, you will notice that some variables have a very limited distribution. Specifically, some variables may have a value of `0` for the majority of London LSOAs. As a rule of thumb, we will retain only those variables where at least 75% of the LSOAs have values different from `0`.\n\n::: {.callout-warning}\nThis threshold of 75% is arbitrary, and in practice, more thorough consideration should be given when deciding whether to include or exclude a variable.\n:::\n\n```{r}\n#| label: 07-filter-high-zeroes\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# join\nlsoa_df <- lsoa_age |>\n  left_join(lsoa_cob, by = 'lower_layer_super_output_areas_code') |>\n  left_join(lsoa_eth, by = 'lower_layer_super_output_areas_code') |>\n  left_join(lsoa_lan, by = 'lower_layer_super_output_areas_code')\n\n# calculate proportion of zeroes\nzero_prop <- sapply(lsoa_df[2:41], function(x) {\n  mean(x == 0) \n})\n\n# extract variables with high proportion zeroes\nidx <- which(zero_prop > 0.25)\n\n# inspect\nidx\n\n# remove variables with high proportion zeroes\nlsoa_df <- lsoa_df |>\n  select(-white_gypsy_or_irish_traveller, \n         -any_other_uk_languages, \n         -oceanic_or_australian_languages, \n         -north_or_south_american_languages)\n```\n\n::: {.callout-note}\nThe code above makes use of [Boolean logic](https://en.wikipedia.org/wiki/Boolean_algebra) to calculate the proportion of zeroes within each variable. The `x == 0` part checks each value in column `x` to see if it is equal to `0`, returning `TRUE` or `FALSE` for each element. The `mean()` function is then used to calculate the average of the `TRUE` values in the column. Since `TRUE` is treated as `1` and `FALSE` as `0`, this gives the proportion of values in the column that are equal to zero.\n:::\n\nWe can subsequently check for multicollinearity of the remaining variables. The easiest way to check the correlations between all variables is probably by visualising a correlation matrix:\n\n```{r}\n#| label: fig-07-correlation-matrix\n#| fig-cap: Correlation plot of classification variables.\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# inspect variable names \nnames(lsoa_df)\n\n# change variable names to index to improve visualisation\nlsoa_df_vis <- lsoa_df\nnames(lsoa_df_vis)[2:37] <- paste0('v', sprintf('%02d', 1:36))\n\n# correlation matrix\ncor_mat <- cor(lsoa_df_vis[,-1])\n\n# correlation plot\nggcorrplot(cor_mat, outline.col = '#ffffff', tl.cex = 8, legend.title = 'Correlation')\n```\n\nFollowing the approach from [Wyszomierski *et al.* (2024)](https://doi.org/10.1111/geoj.12550), we can define a *weak* correlation as lying between 0 and 0.40, *moderate* as between 0.41 and 0.65, *strong* as between 0.66 and 0.80, and *very strong* as between 0.81 and 1. \n\nA few *strong* and *very strong* correlations can be observed that potentially could be removed; however, to maintain representation, here we decide to retain all variables.\n\n### Variable standardisation\nIf the input data are heavily skewed or contain outliers, $k$-means may produce less meaningful clusters. While normality is not required per se, it has been common to do this nonetheless. More important is to standardise the input variables, especially when they are measured on different scales. This ensures that each variable contributes equally to the clustering process. \n\n```{r}\n#| label: 07-standardise-variables\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# inverse hyperbolic sine \nlsoa_df_vis[,-1] <- sapply(lsoa_df_vis[-1], asinh)\n  \n# range standardise\nlsoa_df_vis[,-1] <- sapply(lsoa_df_vis[-1], function(x){(x-min(x))/(max(x)-min(x))})\n```\n\n### Selecting the number of clusters\nNow our data are prepared we will start by creating an elbow plot. The [elbow method](https://en.wikipedia.org/wiki/Elbow_method_(clustering)#:~:text=In%20cluster%20analysis%2C%20the%20elbow,number%20of%20clusters%20to%20use%60) is a visual tool that helps determine the optimal number of clusters in a dataset. This is important because with $k$-means clustering you need to specify the numbers of clusters *a priori*. The elbow method involves running the clustering algorithm with varying numbers of clusters ($k$) and plotting the total explained variation (known as the *Within Sum of Squares*) against the number of clusters. The goal is to identify the *elbow* point on the curve, where the rate of decrease in explained variation starts to slow. This point suggests that adding more clusters yields diminishing returns in terms of explained variation.\n\n```{r}\n#| label: fig-07-elbow-plot\n#| fig-cap: Elbow plot with *Within Sum of Squares* against number of clusters.\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| cache: True\n#| filename: 'R code'\n# elbow plot\nfviz_nbclust(lsoa_df_vis[,-1], kmeans, nstart = 100, iter.max = 100, method = 'wss') \n```\n\nBased on the elbow plot, we can now choose the number of clusters and it looks like **6** clusters would be a reasonable choice.\n\n::: {.callout-note}\nThe interpretation of an elbow plot can be quite subjective, and multiple options for the optimal number of clusters might be justified; for instance, 4, 5, or even 7 clusters could be reasonable choices. In addition to the elbow method, other techniques can aid in determining the optimal number of clusters, such as [silhouette scores](https://en.wikipedia.org/wiki/Silhouette_(clustering)) and the [gap statistic](https://en.wikipedia.org/wiki/Determining_the_number_of_clusters_in_a_data_set#The_gap_statistics). An alternative and helful approach is to use a [clustergram](https://clustergram.readthedocs.io/en/stable/notebooks/introduction.html), which is a two-dimensional plot that visualises the flows of observations between clusters as more clusters are added. This method illustrates how your data reshuffles with each additional cluster and provides insights into the quality of the splits. This method can be done in R, but currently easier to implement in Python.\n:::\n\n### $k$-means clustering \nNow we have decided on the number of clusters, we can run our $k$-means analysis.\n\n```{r}\n#| label: 07-run-kmeans\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| cache: True\n#| filename: 'R code'\n# set seed for reproducibility\nset.seed(999)\n\n# k-means\nlsoa_clus <- kmeans(lsoa_df_vis[,-1], centers = 6, nstart = 100, iter.max = 100) \n```\n\nWe can inspect the object to get some information about our clusters:\n\n```{r}\n#| label: 07-inspect-kmeans\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# inspect\nlsoa_clus\n```\n\n### Visualising clusters\nWe now need to perform some post-processing to extract useful summary data for each cluster. To characterise the clusters, we can compare the global mean values of each variable with the mean values specific to each cluster. \n\n```{r}\n#| label: 07-cluster-comparision\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n\n# global means\nglob_means <- colMeans(lsoa_df_vis[,-1])\n\n# add clusters to input data\nlsoa_df_vis <- cbind(lsoa_df_vis, cluster = lsoa_clus$cluster)\n\n# cluster means \ncluster_means <- lsoa_df_vis |>\n  group_by(cluster) |>\n  summarise(across(2:37, mean))\n\n# difference\ncluster_diffs <- cluster_means |>\n  mutate(across(2:37, ~ . - glob_means[cur_column()]))\n```\n\nThese comparisons can then be visualised using, for instance, a radial bar plot:\n\n```{r} \n#| label: fig-07-radial-plot\n#| fig-cap: Radial barplots of cluster means for each input variable.\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# to long format\ncluster_diffs_long <- cluster_diffs |>\n  pivot_longer(!cluster, names_to = 'vars', values_to = 'score') \n\n# facet clusters\nggplot(cluster_diffs_long, aes(x = factor(vars), y = score)) +\n  geom_bar(stat = 'identity') +\n  coord_radial(rotate.angle = TRUE, expand = FALSE) +\n  facet_wrap(~cluster, ncol = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(size = 7)) +\n  xlab('') +\n  ylab('')\n```\n\nThese plots can serve as a foundation for creating pen portraits by closely examining which variables drive each cluster. \n\n::: {.callout-tip}\nFor easier interpretation, these values can be transformed into index scores, allowing us to assess which variables are under- or overrepresented within each cluster group.\n:::\n\nOf course, we can also map the results:\n\n```{r tidy='styler'} \n#| label: fig-07-cluster-map\n#| fig-cap: Classification of London LSOAs based on several demographic variables.\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| filename: 'R code'\n# read spatial dataset\nlsoa21 <- st_read('data/spatial/London-LSOA-2021.gpkg')\n\n# join\nlsoa21 <- cbind(lsoa21, cluster = lsoa_clus$cluster)\n\n# shape, polygon\ntm_shape(lsoa21) +\n  \n  # specify column, colours\n  tm_polygons(\n    col = 'cluster',\n    palette = c('#feebe2', '#fbb4b9', '#f768a1', '#c51b8a', '#7a0177'),\n    border.col = '#ffffff',\n    border.alpha = 0.1,\n    title = 'Cluster number'\n  ) +\n  \n  # set layout\n  tm_layout(\n    legend.outside = FALSE,\n    legend.position = c('left', 'bottom'),\n    frame = FALSE\n  )\n```\n\n::: {.callout-important}\nThe reason we can use `cbind()` to join the cluster outputs to the `lsoa21` spatial file is that the LSOAs in both files are recorded in the same order. It is essential to verify that the LSOAs are indeed in the same order in both datasets, as any discrepancy will result in clusters being assigned to the wrong polygons.\n:::\n\n## Assignment\nThe creation of a geodemographic classification is an iterative process. This typically includes adding or removing variables, adjusting the number of clusters, and grouping data in different ways to achieve the most meaningful segmentation. Try to do the following:\n\n1. Download the two datasets provided below and save them to your `data` folder. The datasets include:\n    * A `csv` file containing the number of people aged 16 years and older by occupational category, as defined by the [Standard Occupational Classification 2020](https://www.ons.gov.uk/methodology/classificationsandstandards/standardoccupationalclassificationsoc), aggregated by 2021 LSOAs.\n    * A `csv` file containing the number of people aged 16 years and older by their highest level of qualification, also aggregated to the 2021 LSOA level.\n2. Prepare these two datasets and retain only those variables that are potentially meaningful. Filter out any variables with a high proportion of zero values.\n3. Merge the education and occupation dataset with the dataset used to generate the initial geodemographic classification. Check for multicollinearity and consider removing any variables that are highly correlated.\n4. Perform $k$-means clustering on your extended dataset. Make sure to select an appropriate number of clusters for your analysis.\n5. Interpret the individual clusters in terms of the variables that are under- and overrepresented. \n\n| File                                        | Type   | Link |\n| :------                                     | :------| :------ |\n| London LSOA Census 2021 Occupation          | `csv`  | [Download](https://github.com/jtvandijk/GEOG0030/tree/master/data/attributes/London-LSOA-Occupation.csv) |\n| London LSOA Census 2021 Education           | `csv`  | [Download](https://github.com/jtvandijk/GEOG0030/tree/master/data/attributes/London-LSOA-Education.csv) |\n\n## Before you leave\nHaving finished this tutorial, you should now understand the basics of a geodemographic classification. That is [all for this week](https://www.youtube.com/watch?v=ArFyi_iaEdw)! ","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["assets/styles.css"],"toc":true,"toc-depth":4,"highlight-style":"atom-one","number-sections":true,"output-file":"07-geodemographics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"source","_quarto-vars":{"meta":{"title":"GEOG0030"},"urls":{"w01":"01-spatial.html","w02":"02-operations.html","w03":"03-point-pattern.html","w04":"04-autocorrelation.html","w05":"05-models.html","w06":"06-raster.html","w07":"07-geodemographics.html","w08":"08-network.html","w09":"09-maps.html","w10":"10-datavis.html"},"slides":{"week01":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w01-geo.pdf","week02":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w02-geo.pdf","week03":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w03-geo.pdf","week04":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w04-geo.pdf","week05":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w05-geo.pdf","week06":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w06-geo.pdf","week07":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w07-geo.pdf","week08":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w08-geo.pdf","week09":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w09-geo.pdf","week10":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w10-geo.pdf"}},"theme":{"light":"flatly","dark":"darkly"},"callout-appearance":"simple","smooth-scroll":true,"number-depth":4,"pagetitle":"{{< var meta.title >}}"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}