{"title":"Complex Visualisations","markdown":{"headingText":"Complex Visualisations","containsRefs":false,"markdown":"Most of the visualisations we have created over the past weeks have been maps. However, you will often need to use other types of visualisations for your data, such as histograms, scatterplots, dendrograms, and boxplots. While `base` R can be used for simple visualisations, it is best suited for quick data inspections. For publication-worthy and more complex visualisations, the `ggplot2` library, which we used last week to create bivariate maps, offers a unified and effective approach to data visualisation based on the grammar of graphics. \n\n## Lecture slides\nYou can download the slides of this week's lecture here: [[Link]]({{< var slides.week10 >}}).\n\n## Reading list\n#### Essential readings {.unnumbered}\n- Wickham, H. 2010. A layered grammar of graphics. *Journal of Computational and Graphical Statistics* 19(1): 3-28. [[Link]](https://doi.org/10.1198/jcgs.2009.07098)\n\n#### Suggested readings {.unnumbered}\n- Cheshire, J. and Uberti, O. 2014. *London, The Information Capital: 100 Maps & Graphics That Will Change How You View the City.* London: Particular Books.\n- Wickham, H., Ã‡etinkaya-Rundel, M., and Grolemund, G. *R for Data Science*. 2nd edition. **Chapter 3: Data visualisation**. [[Link]](https://r4ds.had.co.nz/data-visualisation.html)\n\n## Population groups in London\nToday, we will use the same dataset that we used in [Week 8](07-geodemographics.html) on self-identified ethnicity. We will visualise the distribution of the self-identified White-British population across the 12 Inner London Boroughs. The LSOA data covers all usual residents, as recorded in the 2021 Census for England and Wales, aggregated at the Lower Super Output Area (LSOA) level. A copy of the 2021 London LSOAs spatial boundaries is also available. If you do not already have it on your computer, save these file in your `data/attribues` and `data/spatial` folders.\n\n| File                                        | Type   | Link |\n| :------                                     | :------| :------ |\n| London LSOA Census 2021 Ethnicity           | `csv` | [Download](https://github.com/jtvandijk/GEOG0030/tree/master/data/attributes/London-LSOA-Ethnicity.csv) | \n| London LSOA 2021 Spatial Boundaries         | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0030/raw/refs/heads/main/data/spatial/London-LSOA-2021.gpkg) |\n\nTo get started, let us create our first script. **File** -> **New File** -> **R Script**. Save your script as `w10-ethnicity-london.r`. \n\nWe will start by loading the libraries that we will need:\n\n```{r}\n#| label: 10-load-libraries\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| output: False\n#| tidy: True\n#| filename: 'R code'\n# load libraries\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(janitor)\nlibrary(treemapify)\n```\n\n::: {.callout-warning}\nYou may have to install some of these libraries if you have not used these before.\n:::\n\nOnce downloaded, we can load the files in the usual fashion:\n\n```{r}\n#| label: 10-load-csv\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# load attribute dataset\nlsoa_eth <- read_csv('data/attributes/London-LSOA-Ethnicity.csv')\n\n# load spatial dataset\nlsoa21 <- st_read('data/spatial/London-LSOA-2021.gpkg') |>\n  st_drop_geometry()\n\n# inspect\nhead(lsoa_eth)\n\n# inspect\nhead(lsoa21)\n``` \n\n::: {.callout-note}\nYou can further inspect both objects using the `View()` function. \n:::\n\nWe will start by pivoting the data and transforming the raw counts into proportions:\n\n```{r}\n#| label: 10-reformat-eth-data\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# prepare ethnicity data\nlsoa_eth <- lsoa_eth |>\n  clean_names() |>\n  pivot_wider(id_cols = 'lower_layer_super_output_areas_code',\n              names_from = 'ethnic_group_20_categories',\n              values_from = 'observation') |>\n  clean_names()\n\n# proportions, select columns\nlsoa_eth <- lsoa_eth |>\n  rowwise() |>\n  mutate(eth_pop = sum(across(2:21))) |>\n  mutate(across(2:21, ~ . / eth_pop )) |>\n  select(-2)\n\n# inspect\nlsoa_eth\n```\n\n::: {.callout-note}\nIf your `clean_names()` function returns an error, it is likely due to a conflict with another library that also includes a `clean_names()` function. In such cases, R cannot determine which one to use. To resolve this, you can specify the library explicitly by using `janitor::clean_names()`.\n:::\n\nThe column names are rather long, so let's rename these manually:\n\n```{r}\n#| label: 10-rename-columns\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# rename columns\nnames(lsoa_eth)[2:20] <- c('Asian - Bangladeshi', 'Asian - Chinese', 'Asian - Indian', 'Asian - Pakistani', 'Asian - Other', 'Black - African', 'Black - Caribbean', 'Black - Other', 'Mixed - Asian', 'Mixed - Black African', 'Mixed - Black Carribean', 'Mixed - Other', 'White - British', 'White - Irish', 'White - Traveller', 'White - Roma', 'White - Other', 'Arab - Other', 'Any Other Group')\n```\n\nThe last thing we need to do is extract the LSOAs that fall within the 12 Inner London Boroughs. We can do this by using the LSOA names that are inside the spatial dataframe:\n\n```{r tidy='styler'} \n#| label: 10-filter-LSOAs\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| filename: 'R code'\n# boroughs\ninner_boroughs <- c('Camden', 'Greenwich', 'Hackney', 'Hammersmith and Fulham', 'Islington', 'Kensington and Chelsea', 'Lambeth', 'Lewisham', 'Southwark', 'Tower Hamlets', 'Wandsworth', 'Westminster')\n\n# filter spatial data\nlsoa21_inner <- lsoa21 |>\n  filter(str_detect(lsoa21nm, paste(inner_boroughs, collapse = '|')))\n\n# filter attribute data, add lsoa names\nlsoa_eth <- lsoa_eth |>\n  filter(lower_layer_super_output_areas_code %in% lsoa21_inner$lsoa21cd)\n\n# add lsoa names\nlsoa_eth <- lsoa_eth |>\n  left_join(lsoa21[1:2], by = c('lower_layer_super_output_areas_code' = 'lsoa21cd'))\n\n# inspect\nlsoa_eth\n```\n\n::: {.callout-tip}\nIf you want to know what the `paste(inner_boroughs, collapse = '|')` code does, you can run it separately in the console to find out.\n:::\n\n### Building boxplots\nThe ggplot2 library is built [on the layered grammar of graphics](https://www.tandfonline.com/doi/abs/10.1198/jcgs.2009.07098), which provides a structured approach to creating visualisations. This means that plots are constructed by adding layers, such as data, aesthetic mappings (e.g., axes, colours, sizes), geometric shapes (e.g., points, lines, bars), and optional elements like themes or statistical transformations. This modular design allows users to build complex and customisable plots step by step, ensuring flexibility and clarity in the visualisation process.\n\nLet's try to use this approach by making a boxplot on the distribution of people that self-identify as White British across all Inner London Boroughs. With `ggplot2`, every plot begins with the `ggplot()` function, which creates a coordinate system to which layers can be added. The first argument of `ggplot()` specifies the dataset to use:\n\n```{r tidy} \n#| label: fig-10-boxplot-canvas\n#| classes: styled-output\n#| echo: True\n#| eval: False\n#| tidy: True\n#| cache: True\n#| filename: 'R code'\n# initiate ggplot\nggplot(data = lsoa_eth)\n```\n\nTo build your graph, you add one or more layers to `ggplot()`. For instance, `geom_point()` adds a layer of points to create a scatterplot. `ggplot2` provides many geom functions, each adding a different type of layer to your plot. To create a boxplot, you add the `geom_boxplot()` layer. For boxplots, the `mapping` argument defines how dataset variables are linked to visual properties, such as the grouping or value axes. The mapping is paired with `aes()`, where `y` specifies the numeric variable:\n\n```{r tidy='styler'} \n#| label: fig-10-boxplot-basic\n#| fig-cap: Basic boxplot using `ggplot2`.\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| cache: True\n#| filename: 'R code'\n# initiate ggplot\nggplot(data = lsoa_eth, aes(x = `White - British`)) +\n  # add geometry\n  geom_boxplot()\n```\n\n::: {.callout-tip}\nAn aesthetic is a visual property of the elements in your plot. Aesthetics include attributes like size, shape, or colour of points. By modifying the values of these aesthetic properties, you can display a point in various ways, allowing for greater customisation and clarity in your visualisation.\n:::\n\nJust like with `tmap`, we can customise the basic plot by styling the boxplot, adding labels, and adjusting its overall appearancs:\n\n```{r tidy='styler'} \n#| label: fig-10-boxplot-pretty\n#| fig-cap: Stylised boxplot using `ggplot2`.\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| cache: True\n#| filename: 'R code'\n# initiate ggplot\nggplot(data = lsoa_eth, aes(x = `White - British`)) +\n  # add geometry\n  geom_boxplot(\n    fill = '#f0f0f0', \n    color = '#252525', \n    outlier.color = '#ef3b2c', \n    linewidth = 0.5, \n    staplewidth = 0.5, \n    outlier.shape = 16, \n    outlier.size = 2) +\n  # add labels\n  labs(\n    title = 'Population self-identifying as White British',\n    x = ''\n  ) +\n  # set basic theme\n  theme_light() +\n  # customise theme\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14), \n    axis.title = element_text(size = 12, colour = '#34495e'),\n    axis.text = element_text(size = 10, colour = '#34495e'),\n    axis.text.y = element_blank(),\n    axis.title.x = element_blank(),\n    panel.grid.major = element_line(linewidth = 0.5, colour = '#969696'),\n    panel.grid.minor = element_line(linewidth = 0.2, colour = '#d9d9d9')\n  )\n\n```\n\nBut what if we wwant to create a boxplot for all Inner London Boroughs? We can do this by adding a grouping variable:\n\n```{r tidy='styler'} \n#| label: fig-10-boxplot-pretty-boroughs\n#| fig-cap: Stylised boxplot using `ggplot2`.\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| cache: True\n#| filename: 'R code'\n# add borough names\nlsoa_eth <- lsoa_eth |>\n  mutate(borough_name = substr(lsoa21nm, 1, nchar(lsoa21nm) - 5))\n\n# initiate ggplot\nggplot(data = lsoa_eth, aes(x = `White - British`, y = borough_name)) +\n  # add geometry\n  geom_boxplot(\n    fill = '#f0f0f0', \n    color = '#252525', \n    outlier.color = '#ef3b2c', \n    linewidth = 0.5, \n    staplewidth = 0.5, \n    utlier.shape = 16, \n    outlier.size = 2) +\n  # add labels\n  labs(\n    title = 'Population self-identifying as White British',\n    y = 'Borough',\n    x = ''\n  ) +\n  # set basic theme\n  theme_light() +\n  # customise theme\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14), \n    axis.title = element_text(size = 12, colour = '#34495e'),\n    axis.text = element_text(size = 10, colour = '#34495e'),\n    panel.grid.major = element_line(linewidth = 0.5, colour = '#969696'),\n    panel.grid.minor = element_line(linewidth = 0.2, colour = '#d9d9d9')\n  )\n\n```\n\nThe boroughs are drawn in alphabetical order by default. To change this we need to adjust the order by creating a factor. For instance, we can sort the boroughs by their median values.\n\n::: {.callout-note}\nIn R, a factor is a data structure used to represent categorical variables with a specific order or grouping. Factors allow you to define and manipulate the order of categories, which is especially useful for plotting or analysis.\n:::\n\n```{r tidy='styler'} \n#| label: fig-10-boxplot-pretty-boroughs-ordered\n#| fig-cap: Stylised boxplot using `ggplot2`.\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| cache: True\n#| filename: 'R code'\n# median values\nlsoa_med <- lsoa_eth |>\n  group_by(borough_name) |>\n  summarise(median = median(`White - British`))\n  \n# create factor\nlsoa_eth <- lsoa_eth |>\n  mutate(borough_name_factor = factor(borough_name, levels = lsoa_med$borough_name[order(lsoa_med$median, decreasing = TRUE)]))\n\n# initiate ggplot\nggplot(data = lsoa_eth, aes(x = `White - British`, y = borough_name_factor)) +\n  # add geometry\n  geom_boxplot(\n    fill = '#f0f0f0', \n    color = '#252525', \n    outlier.color = '#ef3b2c', \n    linewidth = 0.5, \n    staplewidth = 0.5, \n    outlier.shape = 16, \n    outlier.size = 2) +\n  # add labels\n  labs(\n    title = 'Population self-identifying as White British',\n    y = 'Borough',\n    x = ''\n  ) +\n  # set basic theme\n  theme_light() +\n  # customise theme\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14), \n    axis.title = element_text(size = 12, colour = '#34495e'),\n    axis.text = element_text(size = 10, colour = '#34495e'),\n    panel.grid.major = element_line(linewidth = 0.5, colour = '#969696'),\n    panel.grid.minor = element_line(linewidth = 0.2, colour = '#d9d9d9')\n  )\n```\n\n### Creating panels\nBoxplots are effective for visualising distributions, but histograms offer another way to explore the same data by showing the frequency of values. While histograms cannot be displayed alongside boxplots in the same image, we can create a series of histograms, each displayed in a separate panel. These panels can show the distributions for different groups, such as individual boroughs.\n\n```{r tidy='styler'} \n#| label: fig-10-histogram-panel\n#| fig-cap: Histograms presented in individual panels.\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| cache: True\n#| filename: 'R code'\n# initiate ggplot\nggplot(data = lsoa_eth, aes(x = `White - British`)) +\n  # add geometry\n  geom_histogram() +\n  # create panels\n  facet_wrap(\n    ~ borough_name, \n    ncol = 4, \n    nrow= 3\n  ) +\n  # add labels\n  labs(\n    title = 'Population self-identifying as White British',\n    y = 'Number of LSOAs',\n    x = ''\n  ) +\n  # set basic theme\n  theme_light() +\n  # customise theme\n  theme(\n    axis.title = element_text(size = 12, colour = '#34495e'),\n    axis.text = element_text(size = 10, colour = '#34495e'),\n  )\n```\n\nWe could use the same approach to create a series of scatterplots to show the relationship between two variables:\n\n```{r tidy='styler'} \n#| label: fig-10-scatter-panel\n#| fig-cap: Scatterplots presented in individual panels.\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| cache: True\n#| filename: 'R code'\n# initiate ggplot\nggplot(data = lsoa_eth, aes(x = `White - British`, y = `White - Other`)) +\n  # add geometry\n  geom_point() +\n  # create panels\n  facet_wrap(\n    ~ borough_name, \n    ncol = 4, \n    nrow= 3) +\n  # set basic theme\n  theme_light() +\n  # customise theme\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14), \n    axis.title = element_text(size = 12, colour = '#34495e'),\n    axis.text = element_text(size = 10, colour = '#34495e'),\n  )\n```\n\n::: {.callout-tip}\nTo export a ggplot, first assign your plot to an object. Then, use the `ggsave()` function to save the plot to a file, specifying the desired filename and format (e.g. `.png` or `.pdf`). You can specify the dimensions of the output using the `width` and `height` arguments.\n:::\n\n### Making treemaps\nThe flexibility of `ggplot2` extends beyond traditional plots through additional libraries that expand its functionality, allowing you to create specialised visualisations. For instance, we can use the `treemapify` library to create a treemap. \n\n::: {.callout-note}\nA treemap is a data visualisation that displays hierarchical data as nested rectangles, with each rectangle representing a category or subcategory. The size of each rectangle is proportional to a specific variable, often reflecting values such as frequency or proportion, making it easier to compare the relative sizes of different elements. Treemaps are particularly useful for visualising large datasets with multiple categories or subcategories in a compact, space-efficient layout.\n:::\n\nLet's try to create a treemap of the mean share of different population groups in the borough of Lambeth. We first need to calculate the mean of each population group in Lambeth and then transform the data from a  [wide format](https://towardsdatascience.com/long-and-wide-formats-in-data-explained-e48d7c9a06cb) to a [long format](https://towardsdatascience.com/long-and-wide-formats-in-data-explained-e48d7c9a06cb) so that all proportions are in the same column.\n\n```{r}\n#| label: 10-treemap-prep\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# mean group values lambeth\nlambeth_mean <- lsoa_eth |>\n  filter(borough_name == 'Lambeth') |>\n  group_by(borough_name) |>\n  summarise(across(2:20, mean))\n\n# wide to long\nlambeth_mean <- lambeth_mean |>\n  pivot_longer(cols = 2:20, \n               names_to = 'population_group', \n               values_to = 'proportion')\n```\n\nWe can now visualise the share of each population group in Lambeth using a treemap:\n\n```{r tidy='styler'} \n#| label: fig-10-treemap\n#| fig-cap: Treemap of relative share of population groups in Lambeth.\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| cache: True\n#| filename: 'R code'\n# initiate ggplot\nggplot(data = lambeth_mean, aes(area = proportion, fill = population_group, label = population_group)) +\n  # add geometry\n  geom_treemap() +\n  # add text\n  geom_treemap_text(\n    colour = 'white', \n    place = 'centre', \n    grow = TRUE,\n    min.size = 8\n  ) +\n  # set basic theme\n  theme_minimal() +\n  # customise theme\n  theme(\n    legend.position = 'none'\n  )\n  \n```\n\nWe could create facets for these treemaps, but we can also use subgroups to create a nested representation of our data - weighted by the total population in each London borough.\n\n```{r}\n#| label: 10-nested-treemap-prep\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| tidy: True\n#| filename: 'R code'\n# mean group values london\nlondon_mean <- lsoa_eth |>\n  group_by(borough_name) |>\n  summarise(across(2:20, mean))\n\n# total group values london\nlondon_sum <- lsoa_eth |>\n  group_by(borough_name) |>\n  summarise(borough_population = sum(eth_pop))\n\n# wide to long,\nlondon_mean <- london_mean |>\n  pivot_longer(cols = 2:20, \n               names_to = 'population_group', \n               values_to = 'proportion')\n\n# add total population, weigh\nlondon_mean <- london_mean |>\n  left_join(london_sum, by = c('borough_name' = 'borough_name')) |>\n  mutate(proportion_weighted = proportion * borough_population)\n```\n\nNow the data have been prepared, we can create a treemap again as follows:\n\n```{r tidy='styler'} \n#| label: fig-10-treemap-subgroups\n#| fig-cap: Treemap of relative share of population groups in London, organised by borough\n#| classes: styled-output\n#| echo: True\n#| eval: True\n#| cache: True\n#| filename: 'R code'\n# initiate ggplot\nggplot(data = london_mean, aes(area = proportion_weighted, fill = population_group, label = population_group, subgroup = borough_name)) +\n  # add geometry\n  geom_treemap() +\n  # add text\n  geom_treemap_text(\n    colour = '#f0f0f0', \n    place = 'centre', \n    grow = TRUE,\n    min.size = 8,\n  ) +\n  # add border\n  geom_treemap_subgroup_border(\n    colour = '#000000'\n  ) +\n  # add text\n  geom_treemap_subgroup_text(\n    colour = '#636363',\n    place = 'bottomleft',\n    size = 14,\n    fontface = 'bold',\n    padding.x = grid::unit(2, 'mm'),\n    padding.y = grid::unit(2, 'mm'),\n  ) +\n  # set basic theme\n  theme_minimal() +\n  # customise theme\n  theme(\n    legend.position = 'none',\n  )\n  \n```\n\n## Assignment\nThe `ggplot2` library supports a wide variety of chart types, all based on the same core principles of layering elements such as data, aesthetics, and geometric shapes. So far, we have worked with boxplots, scatterplots, histograms, and treemaps. However, `ggplot2` also offers many other geometries, including spatial geometries, that you can use to create more diverse visualisations.\n\nUsing the `lsoa_eth` dataset try to to complete the following tasks:\n\n1. Create a [violin plot](https://ggplot2.tidyverse.org/reference/geom_violin.html): A violin plot combines aspects of a boxplot and a density plot, offering a compact view of the distribution of continuous data. Use the `geom_violin()` function to visualise the distribution of the self-identified *Asian Bangladeshi* population for each of the Inner London boroughs.\n2. Create a map: Use the `geom_sf()` function to map the distribution of the self-identified *Black Caribbean* population across Greater London.\n3. Create a faceted map: Create a faceted map showing the distribution of the self-identified *Asian Bangladeshi*, *Asian Chinese*, *Black African*, and *White British* populations across London.\n\n::: {.callout-tip}\nTo help you get familiar with ggplot2 and its principles, you can use the `esquisse` library, which allows you to [interactively create plots and generate the corresponding `ggplot2` code](https://dreamrs.github.io/esquisse/).\n:::\n\n## Before you leave \nThat is it for today, and indeed, [you have now reached the end of Geocomputation](https://www.youtube.com/watch?v=fFw7q-BLxLA)! Over the course of this module, we have explored the fundamental principles of spatial analysis, data visualisation, and reproducible research. It is now inevitable: time for that reading list.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["assets/styles.css"],"toc":true,"toc-depth":4,"highlight-style":"atom-one","number-sections":true,"output-file":"10-datavis.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"source","_quarto-vars":{"meta":{"title":"GEOG0030"},"urls":{"w01":"01-spatial.html","w02":"02-operations.html","w03":"03-point-pattern.html","w04":"04-autocorrelation.html","w05":"05-models.html","w06":"06-raster.html","w07":"07-geodemographics.html","w08":"08-network.html","w09":"09-maps.html","w10":"10-datavis.html"},"slides":{"week01":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w01-geo.pdf","week02":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w02-geo.pdf","week03":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w03-geo.pdf","week04":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w04-geo.pdf","week05":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w05-geo.pdf","week06":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w06-geo.pdf","week07":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w07-geo.pdf","week08":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w08-geo.pdf","week09":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w09-geo.pdf","week10":"https://github.com/jtvandijk/GEOG0030/blob/main/slides/w10-geo.pdf"}},"theme":{"light":"flatly","dark":"darkly"},"callout-appearance":"simple","smooth-scroll":true,"number-depth":4,"pagetitle":"{{< var meta.title >}}"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}