{
  "hash": "c1038496f29520394f7ea2db4a0dd82c",
  "result": {
    "markdown": "# Accessibility Analysis\nAccessibility is often described as the ease with which individuals can reach places and opportunities, such as employment, public services, and cultural activities. We can utilise transport network data to quantify accessibility and characterise areas based on their accessibility levels. This week, we will use the `dodgr` R library to measure accessibility between different points of interest by calculating the network distances between them.\n\n## Lecture slides\nYou can download the slides of this week's lecture here: [[Link]]({{< var slides.week08 >}}).\n\n## Reading list\n#### Essential readings {.unnumbered}\n- Geurs, K. and Van Wee, B. 2004. Accessibility evaluation of land-use and transport strategies: review and research directions. *Journal of Transport Geography* 12(2): 127-140. [[Link]](https://doi.org/10.1016/j.jtrangeo.2003.10.005)\n- Higgins, C., Palm, M. DeJohn, A. *et al.* 2022. Calculating place-based transit accessibility: Methods, tools and algorithmic dependence. *Journal of Transport and Land Use* 15(1): 95-116. [[Link]](https://doi.org/10.5198/jtlu.2022.2012)\n- Verduzco Torres, J. R. and McArthur, D.P. 2024. Public transport accessibility indicators to urban and regional services in Great Britain. *Scientific Data* 11: 53. [[Link]](https://doi.org/10.1038/s41597-023-02890-w)\n\n#### Suggested readings {.unnumbered}\n- Pänkänen, M., Tenkanen, H., and Mladenovíc, M. 2024. Spatial accessibility and transport inequity in Finland: Open source models and perspectives from planning practice. *Computers, Environment and Urban Systems* 116: 102218. [[Link]](https://doi.org/10.1016/j.compenvurbsys.2024.102218)\n- Van Dijk, J., Krygsman, S. and De Jong, T. 2015. Toward spatial justice: The spatial equity effects of a toll road in Cape Town, South Africa. *Journal of Transport and Land Use* 8(3): 95-114. [[Link]](https://doi.org/10.5198/jtlu.2015.555)\n- Van Dijk, J. and De Jong, T. 2017. Post-processing GPS-tracks in reconstructing travelled routes in a GIS-environment: network subset selection and attribute adjustment. *Annals of GIS* 23(3): 203-217. [[Link]](https://doi.org/10.1080/19475683.2017.1340340)\n\n## Accessibility in Lambeth\nThis week, we will analyse the accessibility of fast-food outlets in the London Borough of Lambeth. Specifically, we will examine how closely these outlets are located within walking distance of primary and secondary schools, and explore any potential relationships between their proximity and the relative levels of deprivation in the area.\n\nWe will extract the points of interest that we will use for this analysis from the [Point of Interest (POI) data for the United Kingdom](https://journals.sagepub.com/doi/10.1177/23998083241263124), obtained from the [Overture Maps Foundation](https://overturemaps.org/) and pre-processed by the [Consumer Data Research Centre](https://data.cdrc.ac.uk/dataset/point-interest-data-united-kingdom#data-and-resources) to provide users with easy access.\n\nYou can download a subset of the POI dataset via the link provided below. A copy of the 2011 London LSOAs spatial boundaries, the boundaries of the London Boroughs, and the 2019 English [Index of Multiple Deprivation](https://www.gov.uk/government/statistics/english-indices-of-deprivation-2019). Save these files in your project folder under `data`.\n\n| File                                        | Type   | Link |\n| :------                                     | :------| :------ |\n| Lambeth Overture Points of Interest 2024    | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0030/raw/refs/heads/main/data/spatial/Lambeth-POI-2024.gpkg) |\n| London LSOA 2011 Spatial Boundaries         | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0030/raw/refs/heads/main/data/spatial/London-LSOA-2011.gpkg) |\n| London Borough Spatial Boundaries           | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0030/raw/refs/heads/main/data/spatial/London-Boroughs.gpkg) |\n| England 2019 Index of Multiple Deprivation  | `csv` | [Download](https://github.com/jtvandijk/GEOG0030/tree/master/data/attributes/England-IMD-2019.csv) |\n\n::: {.callout-tip}\nYou may have already downloaded some of these datasets in previous weeks, but for completeness, they are all provided here. Only download the datasets you do not already have or did not save.\n:::\n\n::: {.callout-note}\nTo extract the Lambeth Overture Points of Interest data, a 2-kilometre buffer was applied around the boundaries of Lambeth. This approach ensures that points just outside the study area are included, as locations beyond the borough boundary may still be accessible to residents and could represent the nearest available options.\n:::\n\nOpen a new script within your `GEOG0030` project and save this as `w08-accessibility-analysis.r`. \n\nWe will start by loading the libraries that we will need:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# load libraries\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tmap)\nlibrary(osmdata)\nlibrary(dodgr)\n```\n:::\n\n\n::: {.callout-warning}\nYou may have to install some of these libraries if you have not used these before.\n:::\n\nNext, we can load the spatial data into R.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# read poi data\npoi24 <- st_read(\"data/spatial/Lambeth-POI-2024.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Lambeth-POI-2024' from data source \n  `/Users/justinvandijk/Library/CloudStorage/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0030/data/spatial/Lambeth-POI-2024.gpkg' \n  using driver `GPKG'\nSimple feature collection with 65060 features and 11 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: 526556.6 ymin: 167827 xmax: 535640.4 ymax: 182673.8\nProjected CRS: OSGB36 / British National Grid\n```\n:::\n\n```{.r .cell-code}\n# read lsoa dataset\nlsoa11 <- st_read(\"data/spatial/London-LSOA-2011.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `London-LSOA-2011' from data source \n  `/Users/justinvandijk/Library/CloudStorage/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0030/data/spatial/London-LSOA-2011.gpkg' \n  using driver `GPKG'\nSimple feature collection with 4835 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 503574.2 ymin: 155850.8 xmax: 561956.7 ymax: 200933.6\nProjected CRS: OSGB36 / British National Grid\n```\n:::\n\n```{.r .cell-code}\n# read borough dataset\nborough <- st_read(\"data/spatial/London-Boroughs.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `london_boroughs' from data source \n  `/Users/justinvandijk/Library/CloudStorage/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0030/data/spatial/London-Boroughs.gpkg' \n  using driver `GPKG'\nSimple feature collection with 33 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9\nProjected CRS: OSGB36 / British National Grid\n```\n:::\n:::\n\n\nNow, carefully examine each individual dataframe to understand how the data is structured and what information it contains.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# inspect poi data\nhead(poi24)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 11 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: 526913.4 ymin: 169695.2 xmax: 526945.5 ymax: 169970.8\nProjected CRS: OSGB36 / British National Grid\n                                id    primary_name       main_category\n1 08f194ada9716b86030eab41bbd4207e \"Gorgeous Grub\" \"burger_restaurant\"\n2 08f194ada9715a1903d73f4aef170602    \"TLC Direct\"   \"wholesale_store\"\n3 08f194ada944cba203fa613de4f5e6d5     \"JD Sports\"       \"sports_wear\"\n4 08f194ada9449a8a0345a466a0a6ece9       \"Lidl GB\"       \"supermarket\"\n                    alternate_category                                 address\n1   eat_and_drink|fast_food_restaurant                 \"1 Prince Georges Road\"\n2 professional_services|lighting_store                      \"280 Western Road\"\n3            sporting_goods|shoe_store \"Unit 2 Tandem Centre Top Of Church Rd\"\n4          retail|fast_food_restaurant                         \"Colliers Wood\"\n         locality   postcode region country source   source_record_id\n1        \"London\"   \"SW19 2\"  \"ENG\"    \"GB\" \"meta\"  \"232538816864698\"\n2        \"London\" \"SW19 2QA\"  \"ENG\"    \"GB\" \"meta\" \"1959707454355017\"\n3 \"Colliers Wood\" \"SW19 2TY\"   <NA>    \"GB\" \"meta\"  \"644899945690935\"\n4        \"London\" \"SW19 2TY\"   <NA>    \"GB\" \"meta\"  \"111430837210163\"\n                            geom\n1 MULTIPOINT ((526913.4 16984...\n2 MULTIPOINT ((526921.1 16969...\n3 MULTIPOINT ((526915.7 16997...\n4 MULTIPOINT ((526922.2 16988...\n [ reached 'max' / getOption(\"max.print\") -- omitted 2 rows ]\n```\n:::\n\n```{.r .cell-code}\n# inspect lsoa dataset\nhead(lsoa11)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 531948.3 ymin: 180733.9 xmax: 545296.2 ymax: 184700.6\nProjected CRS: OSGB36 / British National Grid\n   lsoa11cd            lsoa11nm           lsoa11nmw  bng_e  bng_n     long\n1 E01000001 City of London 001A City of London 001A 532129 181625 -0.09706\n2 E01000002 City of London 001B City of London 001B 532480 181699 -0.09197\n3 E01000003 City of London 001C City of London 001C 532245 182036 -0.09523\n4 E01000005 City of London 001E City of London 001E 533581 181265 -0.07628\n       lat                               globalid          lsoa11_name pop2011\n1 51.51810 {283B0EAD-F8FC-40B6-9A79-1DDD7E5C0758}  City of London 001A    1465\n2 51.51868 {DDCE266B-7825-428C-9E0A-DF66B0179A55}  City of London 001B    1436\n3 51.52176 {C45E358E-A794-485A-BF76-D96E5D458EA4}  City of London 001C    1346\n4 51.51452 {4DDAF5E4-E47F-4312-89A0-923FFEC028A6}  City of London 001E     985\n                            geom\n1 MULTIPOLYGON (((532105.1 18...\n2 MULTIPOLYGON (((532634.5 18...\n3 MULTIPOLYGON (((532135.1 18...\n4 MULTIPOLYGON (((533808 1807...\n [ reached 'max' / getOption(\"max.print\") -- omitted 2 rows ]\n```\n:::\n\n```{.r .cell-code}\n# inspect borough dataset\nhead(borough)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 507007.4 ymin: 155850.8 xmax: 561957.5 ymax: 194889.3\nProjected CRS: OSGB36 / British National Grid\n  objectid                 name  gss_code  hectares nonld_area ons_inner\n1        1 Kingston upon Thames E09000021  3726.117      0.000         F\n2        2              Croydon E09000008  8649.441      0.000         F\n3        3              Bromley E09000006 15013.487      0.000         F\n4        4             Hounslow E09000018  5658.541     60.755         F\n5        5               Ealing E09000009  5554.428      0.000         F\n6        6             Havering E09000016 11445.735    210.763         F\n  sub_2011                           geom\n1    South POLYGON ((516401.6 160201.8...\n2    South POLYGON ((535009.2 159504.7...\n3    South POLYGON ((540373.6 157530.4...\n4     West POLYGON ((509703.4 175356.6...\n5     West POLYGON ((515647.2 178787.8...\n6     East POLYGON ((553564 179127.1, ...\n```\n:::\n:::\n\n\n### POI data\nThe inspection shows that the POI dataset contains a wide variety of location types, with each point tagged under a main and alternative category, as provided by the Overture Maps Foundation via Meta and Microsoft. However, these tags may not be consistent across the dataset, so we will need to identify specific keywords to filter the `main_category` and `alternate_category` columns. \n\nWe will start by filtering out all POIs where the word `school` features in the `main_category` column:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# filter school poi data\npoi_schools <- poi24 |>\n    filter(str_detect(main_category, \"school\"))\n\n# inspect\nhead(unique(poi_schools$main_category), n = 50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"\\\"day_care_preschool\\\"\"              \"\\\"driving_school\\\"\"                 \n [3] \"\\\"elementary_school\\\"\"               \"\\\"school\\\"\"                         \n [5] \"\\\"language_school\\\"\"                 \"\\\"music_school\\\"\"                   \n [7] \"\\\"specialty_school\\\"\"                \"\\\"preschool\\\"\"                      \n [9] \"\\\"dance_school\\\"\"                    \"\\\"high_school\\\"\"                    \n[11] \"\\\"drama_school\\\"\"                    \"\\\"cooking_school\\\"\"                 \n[13] \"\\\"middle_school\\\"\"                   \"\\\"vocational_and_technical_school\\\"\"\n[15] \"\\\"art_school\\\"\"                      \"\\\"private_school\\\"\"                 \n[17] \"\\\"religious_school\\\"\"                \"\\\"nursing_school\\\"\"                 \n[19] \"\\\"montessori_school\\\"\"               \"\\\"public_school\\\"\"                  \n[21] \"\\\"cosmetology_school\\\"\"              \"\\\"medical_school\\\"\"                 \n[23] \"\\\"engineering_schools\\\"\"             \"\\\"massage_school\\\"\"                 \n[25] \"\\\"business_schools\\\"\"                \"\\\"law_schools\\\"\"                    \n[27] \"\\\"medical_sciences_schools\\\"\"        \"\\\"sports_school\\\"\"                  \n[29] \"\\\"flight_school\\\"\"                  \n```\n:::\n:::\n\n\n::: {.callout-tip}\nYou can further inspect the results using the `View()` function. \n:::\n\nThis is still a very large list, and looking at the categories not all POIs containing the string `school` should be included. However, this initial selection has given us a more manageable list from which we can choose the relevant tags. We can now further filter the dataset as well as clip the dataset to the administrative boundaries of Lambeth.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# remove quotes for easier processing\npoi_schools <- poi_schools |>\n    mutate(main_category = str_replace_all(main_category, \"\\\"\", \"\"))\n\n# filter school poi data\npoi_schools <- poi_schools |>\n    filter(main_category == \"elementary_school\" | main_category == \"high_school\" |\n        main_category == \"middle_school\" | main_category == \"private_school\" | main_category ==\n        \"public_school\" | main_category == \"school\")\n\n# filter school poi data\nlambeth <- borough |>\n    filter(name == \"Lambeth\")\n\npoi_schools <- poi_schools |>\n    st_intersection(lambeth) |>\n    select(1:11)\n\n# inspect\npoi_schools\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 141 features and 11 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 528635.7 ymin: 169846.4 xmax: 533065.9 ymax: 180398\nProjected CRS: OSGB36 / British National Grid\nFirst 10 features:\n                                 id\n6  08f194ad1a394235035f3ab7c2e4721d\n7  08f194ad1a8da734035945d69c357ddd\n8  08f194ad1abb648603defd9d76b4c314\n27 08f194ad130f0cd303c1c9f9b42438f8\n                                               primary_name     main_category\n6                         \"Woodmansterne Children's Centre\" elementary_school\n7   \"Immanuel & St Andrew Church of England Primary School\"            school\n8  \"Monkey Puzzle Day Nursery & Preschool Streatham Common\"            school\n27                                     \"Campsbourne School\"            school\n                        alternate_category                   address locality\n6                         school|education            \"Stockport Rd\"     <NA>\n7              elementary_school|education           \"Northanger Rd\"     <NA>\n8  education|public_service_and_government \"496 Streatham High Road\" \"London\"\n27                               education                      <NA> \"London\"\n     postcode region country source   source_record_id\n6  \"SW16 5XE\"   <NA>    \"GB\" \"meta\"  \"114577088601307\"\n7  \"SW16 5SL\"   <NA>    \"GB\" \"meta\"  \"128479257200832\"\n8  \"SW16 3QB\"  \"ENG\"    \"GB\" \"meta\" \"1092187950854118\"\n27       <NA>   <NA>    \"GB\" \"meta\"  \"114411542481619\"\n                        geom\n6  POINT (529701.5 169846.4)\n7  POINT (530016.4 170574.1)\n8  POINT (530208.6 170587.9)\n27 POINT (528819.8 174228.7)\n [ reached 'max' / getOption(\"max.print\") -- omitted 6 rows ]\n```\n:::\n:::\n\n\nThis is still a rather long list and likely inaccurate. According to [Lambeth Council Education Statistics](https://www.lambeth.gov.uk/sites/default/files/2024-07/Education_Statistics_2023-24.pdf), there should be 80 primary and secondary schools across the borough. We can use the `alternate_category` column to further narrow down our results.\n\n::: {.callout-tip}\nYou can inspect the different tags and their frequencies easily by creating a frequency table: `table(poi_schools$alternate_category)`.\n:::\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# filter school poi data\npoi_schools <- poi_schools |>\n    filter(str_detect(alternate_category, \"elementary_school\") | str_detect(alternate_category,\n        \"high_school\") | str_detect(alternate_category, \"middle_school\") | str_detect(alternate_category,\n        \"private_school\") | str_detect(alternate_category, \"public_school\"))\n\n# inspect\npoi_schools\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 58 features and 11 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 528635.7 ymin: 170025.3 xmax: 532897.2 ymax: 179678.2\nProjected CRS: OSGB36 / British National Grid\nFirst 10 features:\n                                id\n1 08f194ad1a8da734035945d69c357ddd\n2 08f194ad1a70460d037da737c256001b\n3 08f194ad1c2dc81c032e9e0aa296a8d1\n4 08f194ad1e4cec5903fafb7496a2d2f3\n                                             primary_name     main_category\n1 \"Immanuel & St Andrew Church of England Primary School\"            school\n2                                \"Granton Primary School\" elementary_school\n3                 \"Kingswood Primary School (Upper Site)\" elementary_school\n4                              \"Battersea Grammar School\"            school\n           alternate_category          address locality   postcode region\n1 elementary_school|education  \"Northanger Rd\"     <NA> \"SW16 5SL\"   <NA>\n2        school|public_school     \"Granton Rd\"     <NA> \"SW16 5AN\"   <NA>\n3          school|high_school \"193 Gipsy Road\" \"London\"   \"SE27 9\"  \"ENG\"\n4       high_school|education             <NA> \"London\"       <NA>   <NA>\n  country source  source_record_id                      geom\n1    \"GB\" \"meta\" \"128479257200832\" POINT (530016.4 170574.1)\n2    \"GB\" \"meta\" \"235737420093504\" POINT (529299.7 170025.3)\n3    \"GB\" \"meta\" \"110066125723254\" POINT (532897.2 171498.4)\n4    \"GB\" \"meta\" \"103107239728950\" POINT (529523.9 172310.9)\n [ reached 'max' / getOption(\"max.print\") -- omitted 6 rows ]\n```\n:::\n:::\n\n\nSince the POI dataset is compiled from various open sources, the data quality is not guaranteed. Some schools may be missing, while others could be duplicated, perhaps under slightly different names or because different buildings have been assigned separate point locations. However, it is unlikely that more than one school would share the same postcode. Therefore, we will use postcode information (where available) to finalise our school selection and remove any likely duplicates.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# identify duplicate postcodes\npoi_schools <- poi_schools |>\n    group_by(postcode) |>\n    mutate(rank = rank(primary_name)) |>\n    ungroup()\n\n# filter school poi data\npoi_schools <- poi_schools |>\n    filter(is.na(postcode) | rank == 1) |>\n    select(-rank)\n\n# inspect\npoi_schools\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 54 features and 11 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 528635.7 ymin: 170025.3 xmax: 532897.2 ymax: 179678.2\nProjected CRS: OSGB36 / British National Grid\n# A tibble: 54 × 12\n   id    primary_name main_category alternate_category address locality postcode\n   <chr> <chr>        <chr>         <chr>              <chr>   <chr>    <chr>   \n 1 08f1… \"\\\"Immanuel… school        elementary_school… \"\\\"Nor…  <NA>    \"\\\"SW16…\n 2 08f1… \"\\\"Granton … elementary_s… school|public_sch… \"\\\"Gra…  <NA>    \"\\\"SW16…\n 3 08f1… \"\\\"Kingswoo… elementary_s… school|high_school \"\\\"193… \"\\\"Lond… \"\\\"SE27…\n 4 08f1… \"\\\"Batterse… school        high_school|educa…  <NA>   \"\\\"Lond…  <NA>   \n 5 08f1… \"\\\"St Bede'… school        elementary_school… \"\\\"St …  <NA>    \"\\\"SW12…\n 6 08f1… \"\\\"St Leona… school        elementary_school… \"\\\"42 … \"\\\"Lond… \"\\\"SW16…\n 7 08f1… \"\\\"Richard … elementary_s… college_universit… \"\\\"New…  <NA>    \"\\\"SW2 …\n 8 08f1… \"\\\"Henry Ca… school        high_school|eleme… \"\\\"Hyd…  <NA>    \"\\\"SW12…\n 9 08f1… \"\\\"South Ba… school        high_school|b2b_s… \"\\\"56 … \"\\\"Lond… \"\\\"SW2 …\n10 08f1… \"\\\"Glenbroo… elementary_s… school|public_sch… \"\\\"Cla…  <NA>    \"\\\"SW4 …\n# ℹ 44 more rows\n# ℹ 5 more variables: region <chr>, country <chr>, source <chr>,\n#   source_record_id <chr>, geom <POINT [m]>\n```\n:::\n:::\n\n\nAlthough we now have fewer schools than we had expected, either due to overly restrictive filtering of tags or because some school locations are not recorded in the dataset, we will proceed with the current data.\n\n::: {.callout-important}\nVariable preparation can be a time-consuming process that often necessitates a more extensive exploratory analysis to ensure sufficient data quality. This may involve sourcing additional data to supplement your existing dataset.\n:::\n\nWe can use a similar approach to approximate the locations of fast food outlets in the Borough.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# filter fast food poi data\npoi_fastfood <- poi24 |>\n    filter(str_detect(main_category, \"fast_food_restaurant\") | str_detect(alternate_category,\n        \"fast_food_restaurant\") | str_detect(alternate_category, \"chicken_restaurant\") |\n        str_detect(alternate_category, \"burger_restaurant\"))\n\n# inspect\npoi_fastfood\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 1444 features and 11 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: 526666.3 ymin: 168272.9 xmax: 535546.9 ymax: 182554\nProjected CRS: OSGB36 / British National Grid\nFirst 10 features:\n                                id     primary_name          main_category\n1 08f194ada9716b86030eab41bbd4207e  \"Gorgeous Grub\"    \"burger_restaurant\"\n2 08f194ada9449a8a0345a466a0a6ece9        \"Lidl GB\"          \"supermarket\"\n3 08f194ada944daa80328c6604dab3503     \"Moss Bros.\" \"men's_clothing_store\"\n4 08f194ada932ad8603db11bbb7f953a7 \"Livi's Cuisine\"   \"african_restaurant\"\n                  alternate_category                          address  locality\n1 eat_and_drink|fast_food_restaurant          \"1 Prince Georges Road\"  \"London\"\n2        retail|fast_food_restaurant                  \"Colliers Wood\"  \"London\"\n3               fast_food_restaurant \"Unit 5, Tandem Shopping Centre\"  \"London\"\n4       caterer|fast_food_restaurant                   \"1 Locks Lane\" \"Mitcham\"\n    postcode region country source  source_record_id\n1   \"SW19 2\"  \"ENG\"    \"GB\" \"meta\" \"232538816864698\"\n2 \"SW19 2TY\"   <NA>    \"GB\" \"meta\" \"111430837210163\"\n3 \"SW19 2TY\"   <NA>    \"GB\" \"meta\" \"478090646011341\"\n4    \"CR4 2\"  \"ENG\"    \"GB\" \"meta\" \"231745500530140\"\n                            geom\n1 MULTIPOINT ((526913.4 16984...\n2 MULTIPOINT ((526922.2 16988...\n3 MULTIPOINT ((526945.5 16992...\n4 MULTIPOINT ((527970.3 16955...\n [ reached 'max' / getOption(\"max.print\") -- omitted 6 rows ]\n```\n:::\n:::\n\n\nLet's map both datasets to get an idea of how the data look like:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# combine for mapping\npoi_schools <- poi_schools |>\n  mutate(type = \"School\")\npoi_fastfood <- poi_fastfood |>\n  mutate(type = \"Fast food\")\npoi_lambeth <- rbind(poi_schools, poi_fastfood)\n\n# shape, polygon\ntm_shape(lambeth) +\n\n  # specify colours\n  tm_polygons(\n    col = \"#f0f0f0\",\n  ) +\n\n  # shape, points\n  tm_shape(poi_lambeth) +\n\n  # specify column, colours\n  tm_dots(\n    col = \"type\",\n    size = 0.05,\n    palette = c(\"#beaed4\", \"#fdc086\"),\n    title = \"\"\n  ) +\n\n  # set layout\n  tm_layout(\n    legend.outside = TRUE,\n    legend.position = c(\"right\", \"bottom\"),\n    legend.text.size = 1,\n    frame = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![Extracted school and fast food locations for Lambeth.](08-network_files/figure-html/fig-08-poi-map-1.png){#fig-08-poi-map width=672}\n:::\n:::\n\n\n### Network data\nIn addition to the locations of interest, we need network data to assess the accessibility of schools in relation to fast food outlets. We will use [OpenStreetMap](https://www.openstreetmap.org/#map=6/54.91/-3.43) to extract road segment data. Similar to the POI dataset, OSM uses `key` and `value` tags to categorise the features within its dataset.\n\n::: {.callout-note}\nOpenStreetMap (OSM) is a free, editable map of the world, but its coverage is uneven globally. However, the accuracy and quality of the data can at times be questionable, with details such as road types and speed limits missing. The [OpenStreetMap Wiki](https://wiki.openstreetmap.org/wiki/Tags) provides more details on the tagging system.\n:::\n\nTo download the Lambeth road network dataset, we first need to define our bounding box coordinates. We will then use these coordinates in our OSM query to extract specific types of road segments within the defined search area. Our focus will be on selecting all OSM features with the `highway` tag that are likely to be used by pedestrians (e.g. excluding `motorways`).\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# define our bbox coordinates, use WGS84\nbbox_lambeth <- poi24 |>\n    st_transform(4326) |>\n    st_bbox()\n\n# osm query\nosm_network <- opq(bbox = bbox_lambeth) |>\n    add_osm_feature(key = \"highway\", value = c(\"primary\", \"secondary\", \"tertiary\",\n        \"residential\", \"path\", \"footway\", \"unclassified\", \"living_street\", \"pedestrian\")) |>\n    osmdata_sf()\n```\n:::\n\n\n::: {.callout-warning}\nIn some cases, the OSM query may return an error, particularly when multiple users from the same location are executing the exact same query. If so, you can download a prepared copy of the data here: [[Download]](https://github.com/jtvandijk/GEOG0030/raw/refs/heads/main/data/spatial/London-OSM-Roads.RData). You can load this copy into R through `load('data/spatial/London-OSM-Roads.RData')`\n:::\n\nThe returned `osm_network` object contains a variety of elements with the specified tags. Our next step is to extract the spatial data from this object to create our road network dataset. Specifically, we will extract the edges of the network, which represent the lines of the roads, as well as the nodes, which represent the points where the roads start, end, or intersect.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# extract the nodes, with their osm_id\nosm_network_nodes <- osm_network$osm_points[, \"osm_id\"]\n\n# extract the edges, with their osm_id and relevant columns\nosm_network_edges <- osm_network$osm_lines[, c(\"osm_id\", \"name\", \"highway\", \"maxspeed\",\n    \"oneway\")]\n\n# inspect\nhead(osm_network_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -0.1541499 ymin: 51.52434 xmax: -0.1457924 ymax: 51.52698\nGeodetic CRS:  WGS 84\n      osm_id                    geometry\n78112  78112 POINT (-0.1457924 51.52698)\n99878  99878 POINT (-0.1529787 51.52434)\n99879  99879 POINT (-0.1532934 51.52482)\n99880  99880 POINT (-0.1535802 51.52508)\n99882  99882 POINT (-0.1541499 51.52567)\n99883  99883 POINT (-0.1541362 51.52598)\n```\n:::\n\n```{.r .cell-code}\n# inspect\nhead(osm_network_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 5 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -0.1398347 ymin: 51.50608 xmax: -0.0821093 ymax: 51.52461\nGeodetic CRS:  WGS 84\n         osm_id                 name     highway maxspeed oneway\n31030     31030          Grafton Way     primary   20 mph    yes\n31039     31039 Tottenham Court Road     primary   20 mph   <NA>\n31959     31959     Cleveland Street residential   20 mph    yes\n554369   554369  King William Street    tertiary   20 mph    yes\n554526   554526     Fenchurch Street    tertiary   20 mph   <NA>\n1530592 1530592  Borough High Street     primary   30 mph    yes\n                              geometry\n31030   LINESTRING (-0.1349216 51.5...\n31039   LINESTRING (-0.1303693 51.5...\n31959   LINESTRING (-0.139512 51.52...\n554369  LINESTRING (-0.08745 51.511...\n554526  LINESTRING (-0.085135 51.51...\n1530592 LINESTRING (-0.0882957 51.5...\n```\n:::\n:::\n\n\nWe can quickly map the network edges to see how the road network looks like:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# shape, polygon\ntm_shape(osm_network_edges) +\n\n  # specify column, classes\n  tm_lines(\n    col = \"#bdbdbd\",\n    lwd = 0.2,\n  ) +\n\n  # shape, polygon\n  tm_shape(lambeth) +\n\n  # specify column, classes\n  tm_borders(\n    col = \"#252525\",\n    lwd = 2\n  ) +\n\n  # set legend\n  tm_add_legend(\n    type = \"line\",\n    labels = \"Road segments\",\n    col = \"#bdbdbd\"\n  ) +\n\n  tm_add_legend(\n    type = \"line\",\n    labels = \"Outline Lambeth\",\n    col = \"#252525\"\n  ) +\n\n  # set layout\n  tm_layout(\n    frame = FALSE,\n    legend.outside = TRUE,\n    legend.position = c(\"right\", \"bottom\"),\n    legend.text.size = 1\n  )\n```\n\n::: {.cell-output-display}\n![Extracted OpenStreetMap road network data for Lambeth.](08-network_files/figure-html/fig-08-netx-map-1.png){#fig-08-netx-map width=672}\n:::\n:::\n\n\n### Network preparation\nSince our focus is on schoolchildren and walking distances, we will overwrite the `oneway` variable to assume that none of the road segments are restricted to one-way traffic. This adjustment will ensure our analysis is not skewed by such restrictions and will help maintain a more accurate representation of the general connectivity of the network.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# overwrite one-way default\nosm_network_edges$oneway <- \"no\"\n```\n:::\n\n\nNow we have the network edges, we can turn this into a graph-representation that allows for the calculation of network-based accessibility statistics with our prepared point of interest data.\n\nIn any network analysis, the primary data structure is a graph composed of nodes and edges. The `dodgr` library utilises weighting profiles to assign weights based on road types, tailored to the mode of transport that each profile is designed to model. In this instance, we will use the `foot` weighting profile, as our focus is on modelling walking accessibility. To prevent errors related to the weighting profile, we will replace any `NA` values in the highway tag with the value `unclassified`.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# replace missing highway tags with unclassified\nosm_network_edges <- osm_network_edges |>\n    mutate(highway = if_else(is.na(highway), \"unclassified\", highway))\n\n# create network graph\nosm_network_graph <- weight_streetnet(osm_network_edges, wt_profile = \"foot\")\n```\n:::\n\n\nOnce we have constructed our graph, we can use it to calculate network distances between our points of interest. One important consideration is that not all individual components in the extracted network may be connected. This can occur, for example, if the bounding box cuts off access to the road of a [cul-de-sac](https://en.wikipedia.org/wiki/Dead_end_(street)). To ensure that our entire extracted network is connected, we will therefore extract the largest connected component of the graph. \n\n::: {.callout-note}\nThe `dodgr` package documentation explains that components are numbered in order of decreasing size, with `$component = 1` always representing the largest component. It is essential to inspect the resulting subgraph to ensure that its coverage is adequate for analysis.\n:::\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# extract the largest connected graph component\nnetx_connected <- osm_network_graph[osm_network_graph$component == 1, ]\n\n# inspect number of remaining road segments\nnrow(netx_connected)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 465610\n```\n:::\n:::\n\n\n::: {.callout-warning}\nOpenStreetMap is a dynamic dataset, meaning that changes are made on a continuous basis. As a result, it is quite possible that the number of remaining road segments, as shown above, may differ slightly when you run this analysis.\n:::\n\n### Accessibility analysis\nNow that we have our connected subgraph, we can use the `dodgr_distances()` function to calculate the network distances between every possible origin (i.e. school) and destination (i.e. fast food outlet). For all combinations, the function will map the point of interest locations to the nearest point on the network and return the corresponding shortest-path distances. \n\n::: {.callout-tip}\nThe `dodgr` package requires data to be projected in WGS84, so we need to reproject our point of interest data accordingly.\n:::\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# reproject\npoi_schools <- poi_schools |>\n    st_transform(4326)\npoi_fastfood <- poi_fastfood |>\n    st_transform(4326)\n\n# distance matrix\ndistance_matrix <- dodgr_distances(netx_connected, from = st_coordinates(poi_schools),\n    to = st_coordinates(poi_fastfood), shortest = FALSE, pairwise = FALSE, quiet = FALSE)\n```\n:::\n\n\nThe result of this computation is a distance matrix that contains the network distances between all origins (i.e. schools) and all destinations (i.e. fast-food outlets):\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# inspect\ndistance_matrix[1:5, 1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            6807494201 7110321980 7110321980 12488816452 12376580459\n8796433764    4660.831   4661.009   4661.009    3118.536    3089.993\n8820889464    3538.365   3679.990   3679.990    1948.343    1919.800\n11479633279   8497.581   8497.760   8497.760    6930.052    6901.509\n292521291     4917.554   4917.732   4917.732    3800.862    3849.454\n12331531180   6270.840   6271.019   6271.019    5154.148    5202.740\n```\n:::\n:::\n\n::: {.callout-tip}\nThe above output displays the distance (in metres) between the first five schools and the first five fast-food outlets. The row and column IDs refer to the nearest nodes on the OSM network to which the schools and fast-food outlets were mapped.\n:::\n\nNow that we have the distance matrix, we can aggregate the data and perform accessibility analysis. For example, we can count the number of fast-food outlets within 500 or 1,000 metres walking distance from each school:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# fast-food outlets within 500m\npoi_schools$fastfood_500m <- rowSums(distance_matrix <= 500)\n\n# fast-food outlets within 1000m\npoi_schools$fastfood_1000m <- rowSums(distance_matrix <= 1000)\n```\n:::\n\n\n::: {.callout-tip}\nYou can further inspect the results using the `View()` function. \n:::\n\nIn the final step, we can investigate whether there is a relationship between the proximity of fast-food outlets and the relative levels of deprivation in the area. One approach is to calculate the average number of fast-food outlets within 1,000 metres of a school for each LSOA, and then compare these figures to their corresponding IMD deciles.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# read imd dataset\nimd19 <- read_csv(\"data/attributes/England-IMD-2019.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 32844 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): lsoa11cd\ndbl (2): imd_rank, imd_dec\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# join imd\nlsoa11 <- lsoa11 |>\n  left_join(imd19, by = c(\"lsoa11cd\" = \"lsoa11cd\"))\n\n# join schools to their parent lsoa\npoi_schools <- poi_schools |>\n  st_transform(27700) |>\n  st_join(lsoa11)\n```\n:::\n\n\nWe can use this approach to derive the average number of fast-food by IMD decile:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# average counts by imd decile\nfastfood_imd <- poi_schools |>\n    group_by(imd_dec) |>\n    mutate(avg_cnt = mean(fastfood_1000m)) |>\n    distinct(imd_dec, avg_cnt) |>\n    arrange(imd_dec)\n\n# inspect\nfastfood_imd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n# Groups:   imd_dec [7]\n  imd_dec avg_cnt\n    <dbl>   <dbl>\n1       2   20.1 \n2       3   14.3 \n3       4   17.6 \n4       5    9.83\n5       6    3   \n6       7    8.4 \n7       8   23.5 \n```\n:::\n:::\n\n\nThere appears to be a weak relationship, with schools in more deprived areas having, on average, a higher number of fast-food outlets within a 1,000-metre walking distance. However, this trend is not consistent, as schools in the least deprived areas of Lambeth show the highest accessibility on average.\n\n## Assignment \nAccessibility analysis involves evaluating how easily people can reach essential services, destinations, or opportunities, such as schools, healthcare facilities, or workplaces, from a given location. The CDRC [Access to Healthy Assets & Hazards (AHAH)](https://data.cdrc.ac.uk/dataset/access-healthy-assets-hazards-ahah) dataset, for instance, uses accessibility analysis to quantify how easy it is to reach 'unhealthy' places, such as pubs and gambling outlets, for each neighbourhood in Great Britain. \n\nHaving run through all the steps during the tutorial, we can recreate this analysis ourselves. Using Lambeth as a case study, try to complete the following tasks:\n\n1. Extract all `pubs` from the Point of Interest dataset.\n2. For each LSOA within Lambeth, calculate the average walking distance to the nearest pub.\n3. Create a map of the results.\n\n::: {.callout-note}\nUnlike before, LSOAs are now the unit of analysis. This means you will need to input the LSOA *centroids* into your distance matrix.\n:::\n\n::: {.callout-tip}\nIf you want to take a deep dive into accessibility analysis, there is a great resource that got published recently: [Introduction to urban accessibility: a practical guide in R](https://ipeagit.github.io/intro_access_book/).\n:::\n\n## Before you leave\nThis brings us to the end of the tutorial. You should now have a basic understanding of the concepts behind accessibility analysis, how it can be executed in R, and some of the challenges you may encounter when conducting your own research. With this being said, [you have now reached the end of this week's content](https://www.youtube.com/watch?v=fFw7q-BLxLA). Onwards and upwards! \n",
    "supporting": [
      "08-network_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}