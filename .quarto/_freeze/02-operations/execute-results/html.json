{
  "hash": "89ab7548088d213567f4e71cdb3a6bbd",
  "result": {
    "markdown": "# Spatial Queries and Geometric Operations\nThis week, we look at geometric operations and spatial queries: the fundamental building blocks when it comes to spatial data processing and analysis. This includes operations such as aggregating point data, calculating the distances separating one or more spatial objects, running a *buffer* analysis, and *intersecting* different spatial layers.\n\n## Lecture slides\nYou can download the slides of this week's lecture here: [[Link]]({{< var slides.week02 >}}).\n\n## Reading list \n#### Essential readings {.unnumbered}\n- Longley, P. *et al.* 2015. *Geographic Information Science & Systems*, **Chapter 2**: *The Nature of Geographic Data*, pp. 33-54. [[Link]](https://ucl.rl.talis.com/link?url=https%3A%2F%2Fapp.knovel.com%2Fhotlink%2Ftoc%2Fid%3AkpGISSE001%2Fgeographic-information-science%3Fkpromoter%3Dmarc&sig=e437927b963cc591dcb65491eccdd3869cc31aef80e1443cb2ba12d8f3bb031a)\n- Longley, P. *et al.* 2015. *Geographic Information Science & Systems*, **Chapter 3**: *Representing Geography*, pp. 55-76. [[Link]](https://ucl.rl.talis.com/link?url=https%3A%2F%2Fapp.knovel.com%2Fhotlink%2Ftoc%2Fid%3AkpGISSE001%2Fgeographic-information-science%3Fkpromoter%3Dmarc&sig=e437927b963cc591dcb65491eccdd3869cc31aef80e1443cb2ba12d8f3bb031a)\n- Longley, P. *et al.* 2015. *Geographic Information Science & Systems*, **Chapter 7**: *Geographic Data Modeling*, pp. 152-172.  [[Link]](https://ucl.rl.talis.com/link?url=https%3A%2F%2Fapp.knovel.com%2Fhotlink%2Ftoc%2Fid%3AkpGISSE001%2Fgeographic-information-science%3Fkpromoter%3Dmarc&sig=e437927b963cc591dcb65491eccdd3869cc31aef80e1443cb2ba12d8f3bb031a)\n- Longley, P. *et al.* 2015. *Geographic Information Science & Systems*, **Chapter 13**: *Spatial Data Analysis*, pp. 290-318. [[Link]](https://ucl.rl.talis.com/link?url=https%3A%2F%2Fapp.knovel.com%2Fhotlink%2Ftoc%2Fid%3AkpGISSE001%2Fgeographic-information-science%3Fkpromoter%3Dmarc&sig=e437927b963cc591dcb65491eccdd3869cc31aef80e1443cb2ba12d8f3bb031a)\n\n#### Suggested readings {.unnumbered}\n- Lovelace, R., Nowosad, J. and Muenchow, J. 2021. *Geocomputation with R*, **Chapter 4**: *Spatial data operations*. [[Link]](https://geocompr.robinlovelace.net/spatial-operations.html)\n- Lovelace, R., Nowosad, J. and Muenchow, J. 2021. *Geocomputation with R*, **Chapter 5**: *Geometry operations*. [[Link]](https://geocompr.robinlovelace.net/geometry-operations.html)\n- Lovelace, R., Nowosad, J. and Muenchow, J. 2021. *Geocomputation with R*, **Chapter 6**: *Reprojecting geographic data*. [[Link]](https://geocompr.robinlovelace.net/reproj-geo-data.html)\n\n## Bike theft in London I\nThis week, we will examine to what extent reported bicycle theft in London cluster around train and underground stations. We will be using open data from [data.police.uk](https://data.police.uk/) on reported crimes alongside [OpenStreetMap](https://www.openstreetmap.org/#map=6/54.91/-3.43) data for this analysis. We will use R to directly download the necessary data from OpenStreetMap, but the crime data will need to be manually downloaded from the data portal. We further have access to a `GeoPackage` that contains the London 2021 MSOA boundaries that we can use as reference layer. If you do not already have it on your computer, save this file in your `data/spatial` folder.\n\n| File                                        | Type   | Link |\n| :------                                     | :------| :------ |\n| London MSOA 2021 Spatial Boundaries         | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0030/raw/refs/heads/main/data/spatial/London-MSOA-2021.gpkg) |\n\n### Crime data\nThe UK Police Data Portal allows you to access and generate tabular data for crime recorded in the UK across the different police forces. To download recorded crime data for London:\n\n1. Navigate to [data.police.uk](https://data.police.uk/) and click on **Downloads**.\n2. Under the data range select `January 2023` to `December 2023`.\n3. Under the **Custom download** tab select `Metropolitan Police Service` and `City of London Police`. Leave the other settings unchanged and click on **Generate file**.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Downloading data on reported crimes through [data.police.uk](https://data.police.uk/)](images/w02/police-data.png){#fig-police-data width=1392}\n:::\n:::\n\n\n4. It may take a few minutes for the download to be generated, so be patient. Once the **Download now** button appears, you can download the dataset.\n5. After downloading, unzip the file. You will find that the zip file contains 12 folders, one for each month of 2023. Each folder includes two files: one for the `Metropolitan Police Service` and one for the `City of London Police`.\n6. Create a new folder named `London-Crime` within your `data/attributes` directory, and copy all 12 folders with the data into this new folder.\n\nTo get started, let us create our first script. **File** -> **New File** -> **R Script**. Save your script as `w02-bike-theft.r`. \n\nWe will start by loading the libraries that we will need:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# load libraries\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(sf)\nlibrary(tmap)\nlibrary(osmdata)\n```\n:::\n\n\n::: {.callout-warning}\nYou may have to install some of these libraries if you have not used these before.\n:::\n\nAlthough we could read each individual crime file into R one by one and then combine them, we can actually accomplish this in a single step:\n\n\n::: {.cell filename='R code'}\n\n```{.r .cell-code}\n# list all csv files\ncrime_df <- list.files(path = \"data/attributes/London-Crime/\", full.names = TRUE, recursive = TRUE) |>\n  # read individual csv files\n  lapply(read_csv) |>\n  # bind together into one\n  bind_rows()\n\n# inspect\nhead(crime_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 12\n  `Crime ID`      Month `Reported by` `Falls within` Longitude Latitude Location\n  <chr>           <chr> <chr>         <chr>              <dbl>    <dbl> <chr>   \n1 4a14d4745da0a2… 2023… City of Lond… City of Londo…    -0.106     51.5 On or n…\n2 e6e32581c99c5b… 2023… City of Lond… City of Londo…    -0.107     51.5 On or n…\n3 7b7cb8e7debe8b… 2023… City of Lond… City of Londo…    -0.110     51.5 On or n…\n4 f7fc44e1e76332… 2023… City of Lond… City of Londo…    -0.108     51.5 On or n…\n5 8083dafd1770af… 2023… City of Lond… City of Londo…    -0.112     51.5 On or n…\n6 4587239a45f0e8… 2023… City of Lond… City of Londo…    -0.112     51.5 On or n…\n# ℹ 5 more variables: `LSOA code` <chr>, `LSOA name` <chr>, `Crime type` <chr>,\n#   `Last outcome category` <chr>, Context <lgl>\n```\n:::\n:::\n\n\n::: {.callout-note}\nDepending on your computer, processing this data may take some time due to the large volume involved. Once completed, you should have a dataframe containing **1,144,329** observations.\n:::\n\n::: {.callout-note}\nYou can further inspect the object using the `View()` function. \n:::\n\nThe column names contain spaces and are therefore not easily referenced. We can easily clean this up using the `janitor` package:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# clean names\ncrime_df <- crime_df |>\n    clean_names()\n\n# inspect\nnames(crime_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"crime_id\"              \"month\"                 \"reported_by\"          \n [4] \"falls_within\"          \"longitude\"             \"latitude\"             \n [7] \"location\"              \"lsoa_code\"             \"lsoa_name\"            \n[10] \"crime_type\"            \"last_outcome_category\" \"context\"              \n```\n:::\n:::\n\n\n::: {.callout-note}\nIf your `clean_names()` function returns an error, it is likely due to a conflict with another library that also includes a `clean_names()` function. In such cases, R cannot determine which one to use. To resolve this, you can specify the library explicitly by using `janitor::clean_names()`.\n:::\n\nFor our analysis, we are currently only interested in reported bicycle thefts, so we need to filter our data based on the `crime_type` column. We can start by examining the unique values in this column and then subset the data accordingly:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# unique types\nunique(crime_df$crime_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Other theft\"                  \"Other crime\"                 \n [3] \"Theft from the person\"        \"Public order\"                \n [5] \"Anti-social behaviour\"        \"Burglary\"                    \n [7] \"Criminal damage and arson\"    \"Drugs\"                       \n [9] \"Shoplifting\"                  \"Vehicle crime\"               \n[11] \"Violence and sexual offences\" \"Bicycle theft\"               \n[13] \"Robbery\"                      \"Possession of weapons\"       \n```\n:::\n\n```{.r .cell-code}\n# filter\ntheft_bike <- crime_df |>\n    filter(crime_type == \"Bicycle theft\")\n\n# inspect\nhead(theft_bike)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 12\n  crime_id  month reported_by falls_within longitude latitude location lsoa_code\n  <chr>     <chr> <chr>       <chr>            <dbl>    <dbl> <chr>    <chr>    \n1 62b0f525… 2023… City of Lo… City of Lon…   -0.0916     51.5 On or n… E01000002\n2 9a078d63… 2023… City of Lo… City of Lon…   -0.0952     51.5 On or n… E01032739\n3 f175a32e… 2023… City of Lo… City of Lon…   -0.0872     51.5 On or n… E01032739\n4 137ec120… 2023… City of Lo… City of Lon…   -0.0783     51.5 On or n… E01032739\n5 4c3b4677… 2023… City of Lo… City of Lon…   -0.108      51.5 On or n… E01032740\n6 13b5eb5c… 2023… City of Lo… City of Lon…   -0.0980     51.5 On or n… E01032740\n# ℹ 4 more variables: lsoa_name <chr>, crime_type <chr>,\n#   last_outcome_category <chr>, context <lgl>\n```\n:::\n:::\n\n\nNow that we have filtered the data to only include reported bicycle thefts, we need to convert our dataframe into a spatial dataframe that maps the locations of the crimes using the recorded latitude and longitude coordinates. We can then project this spatial dataframe into the British National Grid (`EPSG:27700`).\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# to spatial data\ntheft_bike <- theft_bike |>\n    filter(!is.na(longitude) & !is.na(latitude)) |>\n    st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) |>\n    st_transform(27700)\n\n# inspect\nhead(theft_bike)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 10 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 531388 ymin: 180914 xmax: 533447 ymax: 181727.9\nProjected CRS: OSGB36 / British National Grid\n# A tibble: 6 × 11\n  crime_id           month reported_by falls_within location lsoa_code lsoa_name\n  <chr>              <chr> <chr>       <chr>        <chr>    <chr>     <chr>    \n1 62b0f525fc471c062… 2023… City of Lo… City of Lon… On or n… E01000002 City of …\n2 9a078d630cf67c37c… 2023… City of Lo… City of Lon… On or n… E01032739 City of …\n3 f175a32ef7f90c67a… 2023… City of Lo… City of Lon… On or n… E01032739 City of …\n4 137ec1201fd64b578… 2023… City of Lo… City of Lon… On or n… E01032739 City of …\n5 4c3b467755a98afa3… 2023… City of Lo… City of Lon… On or n… E01032740 City of …\n6 13b5eb5ca0aef09a2… 2023… City of Lo… City of Lon… On or n… E01032740 City of …\n# ℹ 4 more variables: crime_type <chr>, last_outcome_category <chr>,\n#   context <lgl>, geometry <POINT [m]>\n```\n:::\n:::\n\n\nLet's map the dataset to get an idea of how the data looks like, using the outline of London as background:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# read spatial dataset\nmsoa21 <- st_read(\"data/spatial/London-MSOA-2021.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `London-MSOA-2021' from data source \n  `/Users/justinvandijk/Library/CloudStorage/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0030/data/spatial/London-MSOA-2021.gpkg' \n  using driver `GPKG'\nSimple feature collection with 1002 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 503574.2 ymin: 155850.8 xmax: 561956.7 ymax: 200933.6\nProjected CRS: OSGB36 / British National Grid\n```\n:::\n\n```{.r .cell-code}\n# london outline\noutline <- msoa21 |>\n  st_union()\n\n# shape, polygon\ntm_shape(outline) +\n\n  # specify colours\n  tm_polygons(\n    col = \"#f0f0f0\",\n  ) +\n\n  # shape, points\n  tm_shape(theft_bike) +\n\n  # specify colours\n  tm_dots(\n    col = \"#fdc086\",\n    size = 0.05,\n  ) +\n\n  # set layout\n  tm_layout(\n    frame = FALSE,\n  )\n```\n\n::: {.cell-output-display}\n![Reported bicycle thefts in London.](02-operations_files/figure-html/fig-02-theft-map-1.png){#fig-02-theft-map width=672}\n:::\n:::\n\n\nWe can save the prepared dataset as a `GeoPackage` so that we can use it some other time:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# write\nst_write(theft_bike, \"data/spatial/London-BicycleTheft-2023.gpkg\")\n```\n:::\n\n\n### Station data\nOpenStreetMap (OSM) is a free, editable map of the world. Each map element (whether a point, line, or polygon) in OSM is tagged with various attribute data. To download the station data we need, we must use the appropriate tags, represented as `key` and `value` pairs, to query the OSM database. In our case, we are looking for train stations, which fall under the *Public Transport* `key`, with a `value` of *station*. To limit our search to London, we can use the spatial extent of the 2021 MSOA boundaries as the bounding box for data extraction.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# define our bbox coordinates, use WGS84\nbbox_london <- msoa21 |>\n  st_transform(4326) |>\n  st_bbox()\n\n# osm query\nosm_stations <- opq(bbox = bbox_london) |>\n  add_osm_feature(key = \"public_transport\", value = \"station\") |>\n  osmdata_sf()\n```\n:::\n\n\n::: {.callout-warning}\nIn some cases, the OSM query may return an error, particularly when multiple users from the same location are executing the exact same query. If so, you can download a prepared copy of the data here: [[Download]](https://github.com/jtvandijk/GEOG0030/raw/refs/heads/main/data/spatial/London-OSM-Stations.RData). You can load this copy into R through `load('data/spatial/London-OSM-Stations.RData')`\n:::\n\nThe OSM query returns all data types, including lines and polygons tagged as stations. For our analysis, we only want to retain the point locations. In addition, we want to clip the results to the outline of London to exclude points that fall within the bounding box but outside the boundaries of Greater London.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# extract points\nosm_stations <- osm_stations$osm_points |>\n    st_set_crs(4326) |>\n    st_transform(27700) |>\n    st_intersection(outline) |>\n    select(c(\"osm_id\", \"name\", \"network\", \"operator\", \"public_transport\", \"railway\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n:::\n\n```{.r .cell-code}\n# inspect\nhead(osm_stations)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 6 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 506148.8 ymin: 168292.6 xmax: 546593.8 ymax: 191714.7\nProjected CRS: OSGB36 / British National Grid\n           osm_id                   name                      network\n780856     780856 Shepherd's Bush Market           London Underground\n1256794   1256794           West Drayton National Rail;Elizabeth Line\n2013971   2013971       Finchley Central           London Underground\n9780241   9780241           St Mary Cray                National Rail\n13330343 13330343               Woodford           London Underground\n13790683 13790683               Mile End           London Underground\n                     operator public_transport railway\n780856                   <NA>          station station\n1256794              TfL Rail          station station\n2013971  Transport for London          station station\n9780241          Southeastern          station station\n13330343   London Underground    stop_position    stop\n13790683   London Underground    stop_position    stop\n                          geometry\n780856   POINT (523195.9 180061.9)\n1256794  POINT (506148.8 180085.4)\n2013971    POINT (525294.7 190658)\n9780241  POINT (546593.8 168292.6)\n13330343 POINT (540946.1 191714.7)\n13790683   POINT (536524.6 182545)\n```\n:::\n\n```{.r .cell-code}\n# inspect\nnrow(osm_stations)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3860\n```\n:::\n:::\n\n\nThe total number of data points seems rather high. In fact, looking at the `railway` variable, several points are not tagged as station or do not have a value at all:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# inspect values\ncount(osm_stations, railway)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 5 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 504982.3 ymin: 159027.2 xmax: 556185.7 ymax: 200138.6\nProjected CRS: OSGB36 / British National Grid\n                 railway    n                       geometry\n1                station  608 MULTIPOINT ((505078.2 17673...\n2                   stop   17 MULTIPOINT ((528197.7 18571...\n3        subway_entrance   36 MULTIPOINT ((525226.4 18745...\n4 train_station_entrance    1      POINT (538196.2 184826.5)\n5                   <NA> 3198 MULTIPOINT ((504982.3 17581...\n```\n:::\n:::\n\n\nThe number of points tagged as station in the railway field are most likely the only points in our dataset that represent actual stations, so we will only retain those points.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# extract train and underground stations\nosm_stations <- osm_stations |>\n    filter(railway == \"station\")\n```\n:::\n\n\nLet's map the dataset to get an idea of how the data looks like, using the outline of London as background:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# shape, polygon\ntm_shape(outline) +\n\n  # specify colours\n  tm_polygons(\n    col = \"#f0f0f0\",\n  ) +\n\n  # shape, points\n  tm_shape(osm_stations) +\n\n  # specify colours\n  tm_dots(\n    col = \"#beaed4\",\n    size = 0.05,\n  ) +\n\n  # set layout\n  tm_layout(\n    frame = FALSE,\n  )\n```\n\n::: {.cell-output-display}\n![Train and underground stations in London.](02-operations_files/figure-html/fig-02-station-map-1.png){#fig-02-station-map width=672}\n:::\n:::\n\nNow we have our data prepared, we can move on to analyse the extent to which bicycle theft in London cluster around stations. We can use both spatial queries and geometric operations to complete this analysis.\n\n### Spatial queries\nA spatial query is used to retrieve data based on its geographic location or spatial relationships. It uses spatial information from one or more layers to find features that meet specific criteria, such as proximity, intersection, or containment. For instance, we can use a spatial query to count all the bicycle thefts that have occurred within 500 metres of a train or underground station:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# create a single station geometry\nosm_stations_comb <- osm_stations |>\n    st_union()\n\n# spatial query\ntheft_bike$d500 <- theft_bike |>\n    st_is_within_distance(osm_stations_comb, dist = 500, sparse = FALSE)\n\n# inspect\nhead(theft_bike)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 11 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 531388 ymin: 180914 xmax: 533447 ymax: 181727.9\nProjected CRS: OSGB36 / British National Grid\n# A tibble: 6 × 12\n  crime_id           month reported_by falls_within location lsoa_code lsoa_name\n  <chr>              <chr> <chr>       <chr>        <chr>    <chr>     <chr>    \n1 62b0f525fc471c062… 2023… City of Lo… City of Lon… On or n… E01000002 City of …\n2 9a078d630cf67c37c… 2023… City of Lo… City of Lon… On or n… E01032739 City of …\n3 f175a32ef7f90c67a… 2023… City of Lo… City of Lon… On or n… E01032739 City of …\n4 137ec1201fd64b578… 2023… City of Lo… City of Lon… On or n… E01032739 City of …\n5 4c3b467755a98afa3… 2023… City of Lo… City of Lon… On or n… E01032740 City of …\n6 13b5eb5ca0aef09a2… 2023… City of Lo… City of Lon… On or n… E01032740 City of …\n# ℹ 5 more variables: crime_type <chr>, last_outcome_category <chr>,\n#   context <lgl>, geometry <POINT [m]>, d500 <lgl[,1]>\n```\n:::\n:::\n\n\n::: {.callout-warning}\nThe above code converts the stations dataframe into a single geometry. This step is essential for `sf` to ensure that each point in the dataset is compared to every point in the stations dataframe. Without this conversion, the comparison would be done one station point at a time, storing only the last result rather than considering all station points simultaneously.\n:::\n\nWe can use the `count()` function to find out just how many thefts fall in each of these categories:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# number of bicycle thefts within 500m of a station\ncount(theft_bike, d500)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 2 features and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: 384131 ymin: 101512 xmax: 612925 ymax: 398061.1\nProjected CRS: OSGB36 / British National Grid\n# A tibble: 2 × 3\n  d500[,1]     n                                                        geometry\n* <lgl>    <int>                                                <MULTIPOINT [m]>\n1 FALSE     5478 ((384131 398061.1), (409823 101512), (494953 212260), (495917 …\n2 TRUE     10541 ((505376 184282.9), (505424 184212), (505433 184416), (505558 …\n```\n:::\n:::\n\nMore than two-thirds of all reported bicycle thefts in London occur within 500 metres of a train or underground station. Of course, we can map the results for a visual inspection:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# shape, polygon\ntm_shape(outline) +\n\n  # specify colours\n  tm_polygons(\n    col = \"#f0f0f0\",\n  ) +\n\n  # shape, points\n  tm_shape(theft_bike) +\n\n  # specify column, colours\n  tm_dots(\n    col = \"d500\",\n    size = 0.01,\n    palette = c(\"#f1a340\", \"#998ec3\"),\n    legend.show = FALSE\n  ) +\n\n  # set legend\n  tm_add_legend(\n    type = \"symbol\",\n    labels = \"> 500m\",\n    col = \"#f1a340\"\n  ) +\n\n  # set legend\n  tm_add_legend(\n    type = \"symbol\",\n    labels = \"< 500m\",\n    col = \"#998ec3\"\n  ) +\n\n  # shape, points\n  tm_shape(osm_stations) +\n\n  # specify colours\n  tm_dots(\n    col = \"#636363\",\n    size = 0.03,\n  ) +\n\n  # set legend\n  tm_add_legend(\n    type = \"symbol\",\n    labels = \"Station\",\n    col = \"#636363\"\n  ) +\n\n  # set layout\n  tm_layout(\n    frame = FALSE,\n    legend.position = c(\"left\", \"bottom\"),\n  )\n```\n\n::: {.cell-output-display}\n![Reported bicycle thefts in London within 500 metres from a train or underground station.](02-operations_files/figure-html/fig-02-theft-map-500m-1.png){#fig-02-theft-map-500m width=672}\n:::\n:::\n\n\n### Geometric operations\nGeometric operations are used to manipulate and analyse the shapes and spatial properties of geometric objects, such as points, lines, and polygons. These operations include tasks like calculating intersections, buffering, and determining the distance between shapes. In this case, we can create 500-metre buffers around each station and then count how many bicycle thefts fall within these buffers.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# buffer\nosm_stations_buffer <- osm_stations |>\n    st_buffer(dist = 500) |>\n    st_union()\n\n# inspect\nhead(osm_stations_buffer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 1 feature \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 504578.2 ymin: 158527.2 xmax: 556685.7 ymax: 200638.6\nProjected CRS: OSGB36 / British National Grid\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nMULTIPOLYGON (((517709.6 169311.1, 517686.6 169...\n```\n:::\n:::\n\n\n::: {.callout-tip}\nWhen performing buffer analysis, the buffer sizes are determined by the units of the coordinate reference system (CRS) used. For instance, with the British National Grid, where the CRS is in metres, the buffer distance must be specified in metres.\n:::\n\nWe can map the results for a visual inspection:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# shape, polygon\ntm_shape(outline) +\n\n  # specify colours\n  tm_polygons(\n    col = \"#f0f0f0\",\n  ) +\n\n  # shape, polygon\n  tm_shape(osm_stations_buffer) +\n\n  # specify colours\n  tm_polygons(\n    col = \"#beaed4\",\n  ) +\n\n  # set layout\n  tm_layout(\n    frame = FALSE,\n  )\n```\n\n::: {.cell-output-display}\n![Train and underground stations in London with a 500 metres buffer.](02-operations_files/figure-html/fig-02-buffer-map-1.png){#fig-02-buffer-map width=672}\n:::\n:::\n\nWe can now use the `st_intersects` function to find out which reported bicycle thefts have occurred within 500 metres of a train or underground station.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# intersect buffer with bicycle thefts\ntheft_bike$d500_buffer <- theft_bike |>\n    st_intersects(osm_stations_buffer, sparse = FALSE)\n\n# number of bicycle thefts within 500m of a station\ncount(theft_bike, d500_buffer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 2 features and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: 384131 ymin: 101512 xmax: 612925 ymax: 398061.1\nProjected CRS: OSGB36 / British National Grid\n# A tibble: 2 × 3\n  d500_buffer[,1]     n                                                 geometry\n* <lgl>           <int>                                         <MULTIPOINT [m]>\n1 FALSE            5484 ((384131 398061.1), (409823 101512), (494953 212260), (…\n2 TRUE            10535 ((505376 184282.9), (505424 184212), (505433 184416), (…\n```\n:::\n:::\n\n\n::: {.callout-important}\nThe results are almost identical, with a small difference due to how the two methods define within and handle spatial relationships and boundaries. For instance, a point on the buffer's edge will be included in the intersect method, but may not meet the distance threshold required by `st_within_distance()`.\n:::\n\n## Assignment \nNow that we are familiar with basic spatial queries and geometric operations, we can conduct a similar analysis on the number of *serious* and *fatal* road crashed in London in 2022 and determine how many occurred on or near a main road. Try to do the following:\n\n1. Download the two datasets provided below and save them in the appropriate subfolder within your `data` directory. The datasets include:\n    * A `csv` file containing the number of road crashes that occurred in London in 2022, extracted from the UK's official road traffic casualty database using the [stats19](https://github.com/ropensci/stats19) R library.\n    * A `GeoPackage` file that contains main roads in London, extracted from the [Ordnance Survey Open Roads](https://www.ordnancesurvey.co.uk/products/os-open-roads) dataset.\n2. Calculate the number of *serious* and *fatal* road crashes that occurred within 100 metres and 500 metres of a main road.\n\n| File                                        | Type   | Link |\n| :------                                     | :------| :------ |\n| London STATS19 Road Collisions 2022         | `csv` | [Download](https://github.com/jtvandijk/GEOG0030/tree/master/data/attributes/London-Collisions-2022.csv) |\n| London OS Open Roads - Main Roads           | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0030/raw/refs/heads/main/data/spatial/London-Open-Roads-Main.gpkg) |\n\n## Before you leave\nBoom. That is how you can conduct basic spatial queries and geometric operations and using R and `sf`. Yet more RGIS coming over the next couple of weeks, but [this concludes the tutorial for this week](https://www.youtube.com/watch?v=Xyt810Ahbxk). Time to check out that reading list?",
    "supporting": [
      "02-operations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}