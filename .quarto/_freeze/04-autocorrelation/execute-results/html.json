{
  "hash": "88a9c09e5ed96a8a5e2502e68261fc80",
  "result": {
    "markdown": "# Spatial Autocorrelation \nThis week, we will explore the concept of spatial dependence: the idea that the value of a variable at one location is influenced by the value of the same variable at nearby locations. This dependence can be statistically measured by assessing spatial autocorrelation, which refers to the degree of similarity between values of a variable at different locations or between multiple variables at the same location.\n\n## Lecture slides \nYou can download the slides of this week's lecture here: [[Link]]({{< var slides.week04 >}}).\n\n## Reading list\n#### Essential readings {.unnumbered}\n- Griffith, D. 2017. *Spatial Autocorrelation*. The Geographic Information Science & Technology Body of Knowledge. [[Link]](https://doi.org/10.22224/gistbok/2017.4.13)\n- Gimond, M. 2023. Intro to GIS and spatial analysis. **Chapter 13**: *Spatial autocorrelation*. [[Link]](https://mgimond.github.io/Spatial/spatial-autocorrelation.html)\n- Livings, M. and Wu, A-M. 2020. *Local Measures of Spatial Association*. The Geographic Information Science & Technology Body of Knowledge. [[Link]](https://doi.org/10.22224/gistbok/2020.3.10)\n- Su, R. Newsham, N., and Dodge, S. 2024. Spatiotemporal dynamics of ethnoracial diversity and segregation in Los Angeles County: Insights from mobile phone data. *Computers, Environment and Urban Systems* 114: 102203. [[Link]](https://doi.org/10.1016/j.compenvurbsys.2024.102203)\n\n#### Suggested readings {.unnumbered}\n- Lee, S. 2019. Uncertainty in the effects of the modifiable areal unit problem under different levels of spatial autocorrelation: a simulation study. *International Journal of Geographical Information Science* 33: 1135-1154. [[Link]](https://doi.org/10.1080/13658816.2018.1542699)\n- Harris, R. 2020. Exploring the neighbourhood-level correlates of Covid-19 deaths in London using a difference across spatial boundaries method. *Health & Place* 66: 102446. [[Link]](https://doi.org/10.1016/j.healthplace.2020.102446)\n\n## Population groups in London\nThis week, we will investigate to what extent people in London who [self-identified](https://www.ons.gov.uk/peoplepopulationandcommunity/culturalidentity/ethnicity/bulletins/ethnicgroupenglandandwales/census2021) as *Asian-Bangladeshi* in the 2021 Census are clustered in London at the LSOA-level. The data covers all usual residents, as recorded in the 2021 Census for England and Wales, aggregated at the [Lower Super Output Area (LSOA)](https://www.ons.gov.uk/methodology/geography/ukgeographies/censusgeographies/census2021geographies) level. \n\n::: {.callout-note}\nAn LSOA is a geographic unit used in the UK for statistical analysis. It typically represents small areas with populations of around 1,000 to 3,000 people and is designed to ensure consistent data reporting. LSOAs are commonly used to report on census data, deprivation indices, and other socio-economic statistics.\n:::\n\nThe data has been extracted using the [Custom Dataset Tool](https://www.ons.gov.uk/datasets/create) and subsequently processed to include only the proportion of individuals who self-identify as belonging to one of the Asian groups defined in the Census. Along with this dataset, we also have access to a `GeoPackage` that contains the LSOA boundaries. \n\nYou can download both files below and save them in your project folder under `data/attributes` and `data/spatial`, respectively.\n\n| File                                        | Type   | Link |\n| :------                                     | :------| :------ |\n| London LSOA Census 2021 Asian Population    | `csv` | [Download](https://github.com/jtvandijk/GEOG0030/tree/master/data/attributes/London-LSOA-Asian.csv) |\n| London LSOA 2021 Spatial Boundaries         | `GeoPackage` | [Download](https://github.com/jtvandijk/GEOG0030/raw/refs/heads/main/data/spatial/London-LSOA-2021.gpkg) |\n\nOpen a new script within your `GEOG0030` project and save this as `w04-spatial-autocorrelation.r`. \n\nBegin by loading the necessary libraries:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# load libraries\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tmap)\nlibrary(spdep)\n```\n:::\n\n\n::: {.callout-warning}\nYou may have to install some of these libraries if you have not used these before.\n:::\n\nOnce downloaded, we can load both files into memory:\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# read spatial dataset\nlsoa21 <- st_read(\"data/spatial/London-LSOA-2021.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `London-LSOA-2021' from data source \n  `/Users/justinvandijk/Library/CloudStorage/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0030/data/spatial/London-LSOA-2021.gpkg' \n  using driver `GPKG'\nSimple feature collection with 4994 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 503574.2 ymin: 155850.8 xmax: 561956.7 ymax: 200933.6\nProjected CRS: OSGB36 / British National Grid\n```\n:::\n\n```{.r .cell-code}\n# load ethnicity data\nlsoa_eth <- read_csv(\"data/attributes/London-LSOA-Asian.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 4994 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): lower_layer_super_output_areas_code\ndbl (5): asian_asian_british_or_asian_welsh_bangladeshi, asian_asian_british...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# inspect\nhead(lsoa21)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 531948.3 ymin: 180733.9 xmax: 545296.2 ymax: 184700.6\nProjected CRS: OSGB36 / British National Grid\n   lsoa21cd                  lsoa21nm  bng_e  bng_n      long      lat\n1 E01000001       City of London 001A 532123 181632 -0.097140 51.51816\n2 E01000002       City of London 001B 532480 181715 -0.091970 51.51882\n3 E01000003       City of London 001C 532239 182033 -0.095320 51.52174\n4 E01000005       City of London 001E 533581 181283 -0.076270 51.51468\n5 E01000006 Barking and Dagenham 016A 544994 184274  0.089317 51.53875\n6 E01000007 Barking and Dagenham 015A 544187 184455  0.077763 51.54058\n                                globalid pop2021                           geom\n1 {1A259A13-A525-4858-9CB0-E4952BA01AF6}    1473 MULTIPOLYGON (((532105.3 18...\n2 {1233E433-0B0D-4807-8117-17A83C23960D}    1384 MULTIPOLYGON (((532634.5 18...\n3 {5163B7CB-4FFE-4F41-95B9-AA6CFC0508A3}    1613 MULTIPOLYGON (((532135.1 18...\n4 {2AF8015E-386E-456D-A45A-D0A223C340DF}    1101 MULTIPOLYGON (((533808 1807...\n5 {B492B45E-175E-4E77-B0B5-5B2FD6993EF4}    1842 MULTIPOLYGON (((545122 1843...\n6 {4A374975-B1D0-40CE-BF6E-6305623E5F7E}    2904 MULTIPOLYGON (((544180.3 18...\n```\n:::\n\n```{.r .cell-code}\n# inspect\nhead(lsoa_eth)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  lower_layer_super_output_areas…¹ asian_asian_british_…² asian_asian_british_…³\n  <chr>                                             <dbl>                  <dbl>\n1 E01000001                                       0.00271                0.0448 \n2 E01000002                                       0.00505                0.0736 \n3 E01000003                                       0.00682                0.0323 \n4 E01000005                                       0.239                  0.0318 \n5 E01000006                                       0.116                  0.00596\n6 E01000007                                       0.113                  0.0148 \n# ℹ abbreviated names: ¹​lower_layer_super_output_areas_code,\n#   ²​asian_asian_british_or_asian_welsh_bangladeshi,\n#   ³​asian_asian_british_or_asian_welsh_chinese\n# ℹ 3 more variables: asian_asian_british_or_asian_welsh_indian <dbl>,\n#   asian_asian_british_or_asian_welsh_pakistani <dbl>,\n#   asian_asian_british_or_asian_welsh_other_asian <dbl>\n```\n:::\n:::\n\n\n::: {.callout-note}\nYou can inspect both objects using the `View()` function. \n:::\n\nYou will notice is that the column names are rather long, so let us rename the columns for easier reference.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# rename columns\nnames(lsoa_eth) <- c(\"lsoa21cd\", \"asian_bangladeshi\", \"asian_chinese\", \"asian_indian\",\n    \"asian_pakistani\", \"asian_other\")\n```\n:::\n\n\n### Spatial dependency\nAs you should know by now, the first step when working with spatial data is to create a map:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# join attribute data onto spatial data\nlsoa21 <- lsoa21 |>\n  left_join(lsoa_eth, by = c(\"lsoa21cd\" = \"lsoa21cd\"))\n\n# shape, polygons\ntm_shape(lsoa21) +\n\n  # specify column, colours\n  tm_polygons(\n    col = \"asian_bangladeshi\",\n    palette = c(\"#f0f9e8\", \"#bae4bc\", \"#7bccc4\", \"#43a2ca\", \"#0868ac\"),\n    border.col = \"#ffffff\",\n    border.alpha = 0.1,\n    title = \"Proportion\"\n  ) +\n\n  # set layout\n  tm_layout(\n    legend.outside = FALSE,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![Proportions of people that self-identify as Asian-Bangladeshi.](04-autocorrelation_files/figure-html/fig-04-join-map-data-1.png){#fig-04-join-map-data width=672}\n:::\n:::\n\n\nLooking at the map, the geographical patterning of the percentage of the population that self-identify as Asian-Bangladeshi appears to be neither random nor uniform, with a tendency for similar values to be found in some neighbourhoods in East London. Let us compare our map to a map with the same values which have been randomly permutated:\n\n\n::: {.cell filename='R code'}\n\n```{.r .cell-code}\n# seed for reproducibility of random permutation\nset.seed(99)\n\n# random permutation\nlsoa21 <- lsoa21 |>\n  mutate(asian_bangladeshi_random = sample(lsoa21$asian_bangladeshi, replace = FALSE))\n\n# shape, polygons\ntm_shape(lsoa21) +\n\n  # specify column, colours\n  tm_polygons(\n    col = \"asian_bangladeshi_random\",\n    palette = c(\"#f0f9e8\", \"#bae4bc\", \"#7bccc4\", \"#43a2ca\", \"#0868ac\"),\n    border.col = \"#ffffff\",\n    border.alpha = 0.1,\n    title = \"Proportion\"\n  ) +\n\n  # set layout\n  tm_layout(\n    legend.outside = FALSE,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![Proportions of people that self-identify as Asian-Bangladeshi with randomly permutated values.](04-autocorrelation_files/figure-html/fig-04-permutation-1.png){#fig-04-permutation width=672}\n:::\n:::\n\n\nLooking at @fig-04-permutation, even with the values being randomly permuted, certain patterns seem to emerge. This observation raises an important question: to what extent are the patterns that we see in the actual data actually present? A widely used method to quantify the similarity between neighbouring locations is by calculating Moran’s I statistic. This measure assesses spatial autocorrelation, indicating the degree to which values of a variable cluster spatially — either through similar (positive spatial autocorrelation) or contrasting values (negative spatial autocorrelation).\n\nUnderlying our Moran's I test is the concept of a **spatial lag**. A spatial lag refers to a concept in spatial analysis where the value of a variable at a given location is influenced by the values of the same variable at neighboring locations. Essentially, it captures the idea that observations in close proximity are likely to be correlated, meaning that what happens in one area can 'lag' into or affect nearby areas. The Moran's I statistic tries to capture the relationship between a value and its spatial lag. An Ordinary Least Squares (OLS) regression is applied, after both variables have been transformed to [z-scores](https://en.wikipedia.org/wiki/Standard_score), to fit the data and produce a slope, which determines the Moran’s I statistic.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Scatter plot of spatially lagged income (neighboring income) versus each areas income. Source: [Manuel Gimond](https://mgimond.github.io/Spatial/spatial-autocorrelation.html).](images/w04/moran-scatter.png){#fig-moran-plot width=1226}\n:::\n:::\n\n\n:::{.callout-important}\nMoran’s I values [typically](https://doi.org/10.1111/j.1538-4632.1984.tb00797.x) range from $-1$ to $1$:\n\n- **+1**: Indicates perfect positive spatial autocorrelation. High values cluster near other high values, and low values near other low values.\n- **0**: Suggests no spatial autocorrelation, meaning the spatial distribution of the variable is random.\n- **-1**: Indicates perfect negative spatial autocorrelation. High values cluster near low values, and vice versa (a checkerboard pattern).\n:::\n\nThere are two approaches to estimating the significance of the Moran's I statistic: an analytical method and a computational method. The analytical method relies on assumptions about the data, such as normality, which can sometimes limit its reliability. In contrast, the computational method, which is preferred here, does not make such assumptions and offers a more flexible and robust evaluation of significance. \n\nThe computational approach is based on a repeated random permutation of the observed values. The Moran's I statistic is then calculated for each of these randomly reshuffled data sets, generating a reference distribution. By comparing the observed Moran’s I value to this reference distribution, we can assess whether our observed statistic is typical or an outlier and calculate a *psuedo* $p$-value (see @fig-moran-plot-sig). If the observed Moran’s I value is an outlier, meaning it falls outside the range expected from random data distribution, it suggests a significant degree of clustering in the data.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Determining significance using a Monte Carlo simulation. Source: [Manuel Gimond](https://mgimond.github.io/Spatial/spatial-autocorrelation.html).](images/w04/mc-sim.png){#fig-moran-plot-sig width=1094}\n:::\n:::\n\n\nWe can derive a *pseudo-*$p$ value from these simulation results as follows:\n\n$$\n\\frac{N_{extreme} + 1}{N + 1}\n$$\n\nwhere ${N_{extreme}}$ is the number of simulated Moran's I values that were more extreme than our observed statistic and ${N}$ is the total number of simulations. In the example shown in @fig-moran-plot-sig, only 1 out the 199 simulations was more extreme than the observed local Moran's I statistic. Therefore ${N_{extreme}}$ = 1 , so $p$ is equal to $(1+1) / (199 + 1) = 0.01$. This means that there is a one percent probability that we would be wrong in rejecting the null hypothesis of spatial randomness. \n\n### Defining neighbours\nIf the purpose of a Moran’s I test is to quantify how similar places are to their neighbours, the first step is to define what constitutes a **neighbour.** This definition is not necessarily straightforward, because 'neighbouring' observations can be determined in various ways, based on either geometry or proximity. The most common methods include:\n\n| Type                 | Description |\n| :-                   | :------ |\n| Contiguity           | Spatial units are considered neighbours if their polygon boundaries touch. |\n| Fixed Distance       | Spatial units are considered neighbours if they fall within a specified distance. |\n| Nearest Neighbours   | Spatial units are considered neighbours if they are among the closest neighbours. |\n\nTo capture this information, we need to formalise the spatial relationships within our data by constructing a spatial weights matrix ($W_{ij}$). This matrix defines which units are neighbours based on our chosen criteria.\n\n::: {.callout-note}\nIn the following example, neighbours are defined as places that share a border (i.e., they are contiguous). Currently, it is sufficient for them to meet at a single point — so if two places are triangular, touching corners would count them as neighbours. If, however, you require them to share an edge, rather than just a corner, you can modify the default argument by setting `queen = FALSE`.\n:::\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# create neighbour list\nlsoa21_nb <- poly2nb(lsoa21, queen = TRUE)\n\n# inspect\nsummary(lsoa21_nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 4994 \nNumber of nonzero links: 29472 \nPercentage nonzero weights: 0.1181714 \nAverage number of links: 5.901482 \nLink number distribution:\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   3   19  185  670 1244 1331  841  404  185   70   21   13    3    1    2    1 \n  20 \n   1 \n3 least connected regions:\n2329 3915 4440 with 1 link\n1 most connected region:\n4990 with 20 links\n```\n:::\n:::\n\n\nThe `neighbour list` object is a [sparse matrix](https://en.wikipedia.org/wiki/Sparse_matrix) that lists the neighboring polygons for each LSOA. This matrix represents the spatial relationships between LSOAs, where each entry indicates which polygons share boundaries. These neighborhood relationships can be visualised as a graph by extracting the coordinate points of the centroids of the polygons representing each LSOA:\n\n::: {.callout-warning}\nRegardless of the neighborhood definition you choose, it is important to verify the results, particularly when using contiguity-based approaches. If your spatial file has issues such as polygons that appear adjacent but do not actually share a border, your results may be inaccurate. You could increase the default value of the `snap` distance parameter in the `poly2nb()` function to include these polygons only separated by small gaps.\n:::\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# extract centroids from polygons\nlsoa21_cent <- st_centroid(lsoa21, of_largest_polygon = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n:::\n\n```{.r .cell-code}\n# plot graph\npar(mai = c(0, 0, 0, 0))\nplot(st_geometry(lsoa21), border = \"#cccccc\")\nplot(lsoa21_nb, st_geometry(lsoa21_cent), add = TRUE)\n```\n\n::: {.cell-output-display}\n![Neighbourhood graph using queen contiguity.](04-autocorrelation_files/figure-html/fig-nb-plot-1.png){#fig-nb-plot width=672}\n:::\n:::\n\n\nWith nearly 5,000 LSOAs, the neighbourhood graph appears quite crowded. However, it seems acceptable, with no noticeable gaps and a dense network of neighbours in Central London, where many smaller LSOAs are located.\n\n### Defining weights\nThe neighbourhood list simply identifies which areas (polygons) are neighbours, but spatial weights take this a step further by assigning a weight to each neighbourhood connection. This is important because not all polygons have the same number of neighbours. To ensure that our spatially lagged values are comparable across neighbourhoods of different sizes, standardisation is required. The code below uses `style = 'W'` to row-standardise the values: if an LSOA has five neighbours, the value of the spatially lagged variable will be the average of that variable across those five neighbours, with each neighbour receiving equal weight.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# create spatial weights matrix\nlsoa21_nb_weights <- lsoa21_nb |>\n    nb2listw(style = \"W\")\n\n# inspect - neigbhours of polygon '10'\nlsoa21_nb_weights$neighbours[[10]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]    6    7    9 3557 3559 3560 3561\n```\n:::\n\n```{.r .cell-code}\n# inspect - weights of neighbours of polygon '10'\nlsoa21_nb_weights$weights[[10]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n```\n:::\n:::\n\n\n:::{.callout-note}\nNot all places have neighbours. Islands, by definition, will not be considered as neighbours using a contiguity approach. If you attempt to create spatial weights using the `nb2listw()` function with a neighbourhood list that includes places without neighbours, you will encounter an error message. Potential solutions include using a different neighbourhood definition (e.g. $k$-nearest neighbours) or manually editing the neighbourhood file if you wish to include these polygons. Alternatively, you can leave it as is but then you must specify the argument `zero.policy = TRUE` in `nb2listw()` to allow for empty sets.\n:::\n\n### Global Moran's I\nNow that everything is in place, we can begin by plotting the proportion of people without schooling against the spatially lagged values:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# moran's plot\nmoran.plot(lsoa21$asian_bangladeshi, listw = lsoa21_nb_weights, xlab = \"Variable: Asian-Bangladeshi\",\n    ylab = \"Spatially Lagged Variable: Asian Bangladeshi\")\n```\n\n::: {.cell-output-display}\n![Plot of lagged values versus polygon values.](04-autocorrelation_files/figure-html/fig-04-plot-moran-queens-1.png){#fig-04-plot-moran-queens width=672}\n:::\n:::\n\n\nWe observe a positive relationship between our `asian_bangladeshi` variable and the spatially lagged values, suggesting that our global Moran's I test will likely yield a statistic reflective of the slope visible in the scatter plot.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# moran's test\nmoran <- moran.mc(lsoa21$asian_bangladeshi, listw = lsoa21_nb_weights, nsim = 999)\n\n# results\nmoran\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  lsoa21$asian_bangladeshi \nweights: lsoa21_nb_weights  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.84992, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n```\n:::\n:::\n\n\nThe results of the [Monte Carlo](https://en.wikipedia.org/wiki/Monte_Carlo_method) simulation, visualised in @fig-04-plot-moran-permutation, suggest that there is statistically significant positive autocorrelation in our variable. This indicates that LSOAs with higher percentages of people that self-identify as Asian-Bangladeshi tend to be surrounded by other LSOAS with similarly high percentages. Likewise, LSOAs with lower percentages of people that self-identify as Asian Bangladeshi are generally surrounded by LSOAs with similarly low values.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# permutation distribution\nplot(moran, main = \"\", xlab = \"Variable: Asian-Bangladeshi\")\n```\n\n::: {.cell-output-display}\n![Density plot of permutation outcomes.](04-autocorrelation_files/figure-html/fig-04-plot-moran-permutation-1.png){#fig-04-plot-moran-permutation width=672}\n:::\n:::\n\n\n### Local Moran's I\nAlthough we have established that there is positive spatial autocorrelation in our data, we still need to identify the specific spatial patterns. Looking back at @fig-moran-plot, you will notice that the plot is divided into four quadrants.\n\n| Quadrant              | Description |\n| :-                    | :------ |\n| Top-right quadrant    | This area represents LSOAs that have a higher-than-average share of the population without schooling and are surrounded by other LSOAs with similarly high shares of the population without schooling. These are known as *high-high* clusters. |\n| Bottom-left quadrant  | This area represents LSOAs with a lower-than-average share of the population without schooling, surrounded by other LSOAs with similarly low shares. These are *low-low* clusters. |\n| Top-left quadrant     | LSOAs with a higher-than-average share of the population without schooling surrounded by LSOAs with a lower-than-average share. These are *high-low* clusters. |\n| Bottom-right quadrant | LSOAs with a lower-than-average share of the population without schooling surrounded by LSOAs with a higher-than-average share. These are *low-high* clusters. |\n\nWe can show these area on a map by deconstructing the Moran's I into a series of [local Moran values](https://doi.org/10.1111/j.1538-4632.1995.tb00338.x), each measuring how similar each place is (individually) to its neighbours.\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# local moran's test\nlmoran <- localmoran_perm(lsoa21$asian_bangladeshi, listw = lsoa21_nb_weights, nsim = 999)\n\n# results\nhead(lmoran)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Ii          E.Ii     Var.Ii      Z.Ii Pr(z != E(Ii))\n1 0.15069391 -0.0032726893 0.03484206 0.8248493   4.094572e-01\n2 0.13225460 -0.0016613502 0.03507478 0.7150473   4.745798e-01\n3 0.09935974 -0.0009791708 0.02573120 0.6255173   5.316316e-01\n4 4.20123420 -0.0098905991 1.02079945 4.1680018   3.072815e-05\n5 2.21814457  0.0064109676 0.29187729 4.0938570   4.242561e-05\n6 1.07427412  0.0125602786 0.17292266 2.5531805   1.067442e-02\n  Pr(z != E(Ii)) Sim Pr(folded) Sim  Skewness Kurtosis\n1              0.130          0.065 -1.903886 3.970373\n2              0.346          0.173 -1.949852 4.028935\n3              0.650          0.325 -1.874507 4.017294\n4              0.010          0.005  1.618687 2.813289\n5              0.010          0.005  2.054221 4.456165\n6              0.060          0.030  1.563633 2.379143\n```\n:::\n:::\n\n\nWe are not given a single statistic as we did with our global Moran's I, but rather we get a table of different statistics that are all related back to each of the LSOAs in our dataset. If we refer to the help page for the `localmoran()` function, we can find detailed explanations of these statistics. The most relevant ones include:\n\n| Name                | Description |\n| :-----              | :---------------|\n| `Ii`                | Local Moran's I statistic. |\n| `E.Ii`              | Expectation (mean) of the local Moran’s I statistic. |\n| `Var.Ii`            | Variance of local Moran's I statistic |\n| `Z.Ii`              | Standard deviation (z-score) of the local Moran’s I statistic. |\n| `Pr()`              | *Pseudo* $p$-value of local Moran's I statistic based on standard deviations and means from the permutation sample. |\n| `Pr() Sim`          | *Pseudo* $p$-value of local Moran's I statistic  based on the rank within the permutation sample, assuming a uniform distribution. |\n| `Pr(Folded) Sim`    | *Pseudo* $p$-value of local Moran's I statistic  based on the rank within the permutation sample using a one-sided test, assuming a uniform distribution. |\n\nWe can further extract the quadrants to which of all these polygons have been assigned:\n\n\n::: {.cell .styled-output filename='R code'}\n\n```{.r .cell-code}\n# extract quadrants\nlmoran_quadrants <- attr(lmoran, \"quadr\")\n\n# inspect\nhead(lmoran_quadrants)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       mean    median     pysal\n1   Low-Low   Low-Low   Low-Low\n2   Low-Low   Low-Low   Low-Low\n3   Low-Low  Low-High   Low-Low\n4 High-High High-High High-High\n5 High-High High-High High-High\n6 High-High High-High High-High\n```\n:::\n:::\n\n\nWe can now link these values back to our spatial dataframe and make a map using the `tmap` library:\n\n\n::: {.cell filename='R code'}\n\n```{.r .cell-code}\n# replace names\nnames(lmoran_quadrants) <- c(\"lmoran_mean\", \"lmoran_median\", \"lmoran_pysal\")\n\n# bind results\nlsoa21 <- lsoa21 |>\n  cbind(lmoran_quadrants)\n\n# shape, polygons\ntm_shape(lsoa21) +\n\n  # specify column, colours\n  tm_polygons(\n    col = \"lmoran_mean\",\n    border.col = \"#ffffff\",\n    border.alpha = 0.3,\n    palette = c(\n      \"Low-Low\" = \"#0571b0\",\n      \"Low-High\" = \"#92c5de\",\n      \"High-Low\" = \"#f4a582\",\n      \"High-High\" = \"#ca0020\"\n    ),\n    title = \"Cluster type\",\n  ) +\n\n  # set layout\n  tm_layout(\n    legend.outside = FALSE,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![Mapping the Local Moran's I clusters.](04-autocorrelation_files/figure-html/fig-04-local-moran-1.png){#fig-04-local-moran width=672}\n:::\n:::\n\n\nThis type of map is called a [LISA map](https://geodacenter.github.io/workbook/6a_local_auto/lab6a.html) and is a great way of showing how a variable is actually clustering over space. However, we can improve on this further by only mapping the statistically significant clusters:\n\n\n::: {.cell filename='R code'}\n\n```{.r .cell-code}\n# replace values if not significant\nlmoran_quadrants[lmoran[, 6] > 0.05, ] <- NA\n\n# replace names\nnames(lmoran_quadrants) <- c(\"lmoran_mean_sig\", \"lmoran_median_sig\", \"lmoran_pysal_sig\")\n\n# bind results\nlsoa21 <- lsoa21 |>\n  cbind(lmoran_quadrants)\n\n# shape, polygons\ntm_shape(lsoa21) +\n\n  # specify column, colours\n  tm_polygons(\n    col = \"lmoran_mean_sig\",\n    border.col = \"#ffffff\",\n    border.alpha = 0.3,\n    palette = c(\n      \"Low-Low\" = \"#0571b0\",\n      \"Low-High\" = \"#92c5de\",\n      \"High-Low\" = \"#f4a582\",\n      \"High-High\" = \"#ca0020\"\n    ),\n    title = \"Cluster type\"\n  ) +\n\n  # set layout\n  tm_layout(\n    legend.outside = FALSE,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![Mapping the significant Local Moran's I clusters.](04-autocorrelation_files/figure-html/fig-04-local-moran-sign-1.png){#fig-04-local-moran-sign width=672}\n:::\n:::\n\n\n:::{.callout-note}\nThis new map may still not fully address the issue of statistical significance due to repeated testing, and some values may appear significant purely by chance. To correct for this, you can adjust the $p$-values using R’s `p.adjust()` function. For further details, refer to [Manual Gimond's explanation](https://mgimond.github.io/Spatial/spatial-autocorrelation.html#a-note-about-interpreting-the-pseudo-p-value) of the [multiple comparison](https://en.wikipedia.org/wiki/Multiple_comparisons_problem) problem in the context of the *pseudo-*$p$ values.\n:::\n\n## Assignment\nAny statistic that includes spatial weights is dependent upon how those weights are defined. We have so far used first order contiguity, i.e. polygons that share a boundary, but there is no particular reason why we should not include second order contiguity polygons (i.e. neighbours of neighbours), use a fixed distance neighbours definitions, or adopt a $k$ nearest neighbours definition. Try to do the following:\n\n1. Extract the centroids from the `lsoa21` file.\n2. Identify the `5` nearest neighbours for each LSOA, using the `knearneigh()` function.\n3. Create a neigbhour list of these nearest neighbours, using the `knn2nb()` function.\n4. Compute the Global Moran’s I of the `asian_indian` variable using this new neighbourhood definition.\n5. Map the statistically significant clusters of Local Moran's I based on this new neighbourhood definition.\n6. Compare these results to the output of our `asian_bangladeshi` values. Do both variables exhibit clustering? Are the clusters located in similar areas?\n\n## Before you leave \nAnd that is how you can measure spatial dependence in your dataset through different spatial autocorrelation measures. Next week we will focus on the last topic within our set of core spatial analysis methods and techniques, but [this week we have covered enough](https://www.youtube.com/watch?v=svU7L8yhav8)! Probably time to get back to that pesky reading list.\n",
    "supporting": [
      "04-autocorrelation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}