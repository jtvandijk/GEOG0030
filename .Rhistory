View(crime_df)
View(crime_df)
nroow(crime_df)
nrow(crime_df)
names(crime_df)
crime_df
crime_df <- crime_df |>
clean_names()
library(janitor)
clean_names()
#| label: 02-rename-fields
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"
# clean names
crime_df <- crime_df |>
clean_names()
names(crime_df)
unique(crime_df$crime_type)
theft_bike
#| label: 02-filter-crime
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: "R code"
# unique types
unique(crime_df$crime_type)
# filter
theft_bike <- crime_df |>
filter(crime_type == 'Bicycle theft')
theft_bike
#| label: 02-station-data
#| classes: styled-output
#| echo: True
#| eval: True
#| warning: False
#| cache: True
#| filename: 'R code'
# read spatial data
msoa21 <- st_read('data/spatial/London-MSOA-2021.gpkg')
# define our bbox coordinates, use WGS84
bbox_london <- msoa21 |>
st_transform(4326) |>
st_bbox()
msoa21
st_crs(msoa21)
t <- msoa21 |> st_transform(4326)
install.packages('stats19')
s
library(tidyverse)
library(stats19)
library(sf)
df <- get_stats19(year = 2023, type = 'collision')
df <- get_stats19(year = 2022, type = 'collision')
df
View(df)
sf <- format_sf(df)
install.packages('spatstat')
install.packages('dbscan')
#| label: 03-load-libraries
#| classes: styled-output
#| echo: True
#| eval: True
#| output: False
#| tidy: True
#| filename: 'R code'
# load libraries
library(tidyverse)
library(sf)
library(tmap)
library(spatstat)
library(dbscan)
#| label: 01-load-gpkg-csv
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: 'R code'
# load msoa dataset
msoa21 <- st_read('data/spatial/London-MSOA-2021.gpkg')
# load bicycle theft dataset
theft_bike <- st_read('data/spatial/London-BicycleTheft-2023.gpkg')
# inspect
head(msoa21)
# inspect
head(theft_bike)
#| label: 03-intersect-point-in-poly
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| message: False
#| filename: "R code"
# point in polygon
msoa21$theft_bike_n <- lengths(st_intersects(msoa_london, theft_bike))
#| label: 03-intersect-point-in-poly
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| message: False
#| filename: "R code"
# point in polygon
msoa21$theft_bike_n <- lengths(st_intersects(msoa21, theft_bike))
msoa21
msoa21 <- msoa21 |>
mutate(km_sq = as.numeric(st_area(msoa21)) / 1e6)
msoa21 <-  msoa21 |>
mutate(theft_bike_n = lengths(st_intersects(msoa21, theft_bike)
msoa21 <-  msoa21 |>
msoa21 <- msoa21 |>
mutate(theft_bike_n = lengths(st_intersects(msoa21, theft_bike))
msoa21 <- msoa21 |>
msoa21 <- msoa21 |>
mutate(theft_bike_n = lengths(st_intersects(msoa21, theft_bike))
msoa21 <- msoa21 |>
msoa21 <- msoa21 |>
mutate(theft_bike_n = lengths(st_intersects(msoa21, theft_bike))
msoa21 <- msoa21 |>
msoa21 <- msoa21 |>
mutate(theft_bike_n = lengths(st_intersects(msoa21, theft_bike)))
msoa21
msoa21  <- msoa21 |>
mutate(thef_km_sq = theft_bike_n/km_sq)
#| label: fig-03-choro-3
#| fig-cap: Number of reported bicycle thefts by square kilometre.
#| echo: True
#| eval: True
#| cache: True
#| filename: "R code"
# shape, polygons
tm_shape(msoa21) +
# specify column, classes, labels, title
tm_polygons(
col= 'thef_km_sq', n = 5, style = 'pretty',
border.col = '#ffffff',
border.alpha = 0.3,
palette = c('#fee5d9','#fcae91','#fb6a4a','#de2d26','#a50f15'),
title = 'Share of population',
) +
# set layout
tm_layout(
frame = FALSE,
legend.position = c('left', 'bottom'),
)
#| label: fig-03-choro-3
#| fig-cap: Number of reported bicycle thefts by square kilometre.
#| echo: True
#| eval: True
#| cache: True
#| filename: "R code"
# shape, polygons
tm_shape(msoa21) +
# specify column, classes, labels, title
tm_polygons(
col= 'thef_km_sq', n = 5, style = 'jenks',
border.col = '#ffffff',
border.alpha = 0.3,
palette = c('#fee5d9','#fcae91','#fb6a4a','#de2d26','#a50f15'),
title = 'Share of population',
) +
# set layout
tm_layout(
frame = FALSE,
legend.position = c('left', 'bottom'),
)
#| label: fig-03-choro-3
#| fig-cap: Number of reported bicycle thefts by square kilometre.
#| echo: True
#| eval: True
#| cache: True
#| filename: "R code"
# shape, polygons
tm_shape(msoa21) +
# specify column, classes, labels, title
tm_polygons(
col= 'thef_km_sq', n = 5, style = 'quantile',
border.col = '#ffffff',
border.alpha = 0.3,
palette = c('#fee5d9','#fcae91','#fb6a4a','#de2d26','#a50f15'),
title = 'Share of population',
) +
# set layout
tm_layout(
frame = FALSE,
legend.position = c('left', 'bottom'),
)
#| label: fig-03-choro-3
#| fig-cap: Number of reported bicycle thefts by square kilometre.
#| echo: True
#| eval: True
#| cache: True
#| filename: "R code"
# shape, polygons
tm_shape(msoa21) +
# specify column, classes, labels, title
tm_polygons(
col= 'thef_km_sq', n = 5, style = 'quantile',
border.col = '#ffffff',
border.alpha = 0.3,
palette = c('#fee5d9','#fcae91','#fb6a4a','#de2d26','#a50f15'),
title = 'Thefts / km$^2$',
) +
# set layout
tm_layout(
frame = FALSE,
legend.position = c('left', 'bottom'),
)
#| label: fig-03-choro-3
#| fig-cap: Number of reported bicycle thefts by square kilometre.
#| echo: True
#| eval: True
#| cache: True
#| filename: "R code"
# shape, polygons
tm_shape(msoa21) +
# specify column, classes, labels, title
tm_polygons(
col= 'thef_km_sq', n = 5, style = 'quantile',
border.col = '#ffffff',
border.alpha = 0.3,
palette = c('#fee5d9','#fcae91','#fb6a4a','#de2d26','#a50f15'),
title = 'Thefts / Square kilometre',
) +
# set layout
tm_layout(
frame = FALSE,
legend.position = c('left', 'bottom'),
)
#| label: fig-03-choro-3
#| fig-cap: Number of reported bicycle thefts by square kilometre.
#| echo: True
#| eval: True
#| cache: True
#| filename: "R code"
# shape, polygons
tm_shape(msoa21) +
# specify column, classes, labels, title
tm_polygons(
col= 'thef_km_sq', n = 5, style = 'jenks',
border.col = '#ffffff',
border.alpha = 0.3,
palette = c('#fee5d9','#fcae91','#fb6a4a','#de2d26','#a50f15'),
title = 'Thefts / Square kilometre',
) +
# set layout
tm_layout(
frame = FALSE,
legend.position = c('left', 'bottom'),
)
#| label: 03-load-libraries
#| classes: styled-output
#| echo: True
#| eval: True
#| output: False
#| tidy: True
#| filename: 'R code'
# load libraries
library(tidyverse)
library(sf)
library(tmap)
library(spatstat)
library(terra)
library(dbscan)
#| label: 01-load-gpkg-csv
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: 'R code'
# load msoa dataset
msoa21 <- st_read('data/spatial/London-MSOA-2021.gpkg')
# load bicycle theft dataset
theft_bike <- st_read('data/spatial/London-BicycleTheft-2023.gpkg')
# inspect
head(msoa21)
# inspect
head(theft_bike)
#| label: 03-intersect-point-in-poly
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| message: False
#| filename: 'R code'
# point in polygon
msoa21 <- msoa21 |>
mutate(theft_bike_n = lengths(st_intersects(msoa21, theft_bike, sparse = TRUE)))
#| label: 03-thefts-per-km2
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| message: False
#| filename: 'R code'
# msoa area size
msoa21 <- msoa21 |>
mutate(km_sq = as.numeric(st_area(msoa21)) / 1e6)
# theft density
msoa21  <- msoa21 |>
mutate(thef_km_sq = theft_bike_n/km_sq)
#| label: fig-03-choro-3
#| fig-cap: Number of reported bicycle thefts by square kilometre.
#| echo: True
#| eval: True
#| cache: True
#| filename: 'R code'
# shape, polygons
tm_shape(msoa21) +
# specify column, classes, labels, title
tm_polygons(
col= 'thef_km_sq', n = 5, style = 'jenks',
border.col = '#ffffff',
border.alpha = 0.3,
palette = c('#fee5d9','#fcae91','#fb6a4a','#de2d26','#a50f15'),
title = 'Thefts / Square kilometre',
) +
# set layout
tm_layout(
frame = FALSE,
legend.position = c('left', 'bottom'),
)
#| label: 03-options
#| echo: False
#| eval: True
#| output: False
# margins
par(mar = c(1, 1, 1, 1))
#| label: fig-03-bike-theft-to-ppp
#| fig-cap: 'Bike theft in London represented as `ppp` object.'
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| cache: True
#| filename: 'R code'
# london outline
outline <- msoa21 |>
st_union()
# clip
theft_bike <- theft_bike |>
st_intersection(outline)
# sf to ppp
window = as.owin(msoa21)
theft_bike_ppp <- ppp(st_coordinates(theft_bike)[,1],
st_coordinates(theft_bike)[,2],
window = window)
# inspect
par(mar = c(1, 1, 1, 1))
plot(theft_bike_ppp, main='')
#| label: 03-check-duplicates
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: 'R code'
# check for duplicates
anyDuplicated(theft_bike_ppp)
# count number of duplicated points
sum(multiplicity(theft_bike_ppp) > 1)
#| label: 03-jitter-jitter-jitter
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| filename: 'R code'
# add ajitter
theft_bike_jitter <- rjitter(theft_bike_ppp, radius=5, retry=TRUE, nsim=1, drop=TRUE)
# check for duplicates
anyDuplicated(theft_bike_jitter)
# count number of duplicated points
sum(multiplicity(theft_bike_jitter) > 1)
#| label: fig-03-bike-theft-kde500
#| fig-cap: 'Kernel density estimation - bandwidth 500m.'
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| cache: True
#| filename: 'R code'
# kernel density estimation
par(mar = c(1, 1, 1, 1))
plot(density.ppp(theft_bike_jitter, sigma=500), main = '')
#| label: fig-03-bike-theft-kde1000
#| fig-cap: 'Kernel density estimation - bandwidth 1000m.'
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| cache: True
#| filename: 'R code'
# kernel density estimation
par(mar = c(1, 1, 1, 1))
plot(density.ppp(theft_bike_jitter, sigma=1000), main = '')
#| label: 03-to-raster
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| cache: True
#| filename: 'R code'
# to raster
theft_bike_raster <- density.ppp(theft_bike_jitter, sigma=1000) |>
rast()
#| label: 03-to-raster-crs
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| cache: True
#| filename: 'R code'
# set CRS
crs(theft_bike_raster) <- 'epsg:27700'
#| label: fig-kde-raster-map
#| fig-cap: Kernel Density Estimate of bicycle thefts in London.
#| echo: True
#| eval: True
#| message: False
#| filename: 'R code'
# shape, polygon
tm_shape(theft_bike_raster) +
# specify column, colours
tm_raster(
col = 'lyr.1',
palette = 'Blues',
title = 'Density'
) +
# set layout
tm_layout(
legend.outside = FALSE,
legend.position = c('left', 'bottom'),
frame = FALSE
)
#| label: 03-dbscan
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| cache: True
#| filename: "R code"
# dbscan
bike_theft_dbscan <- theft_bike |>
st_coordinates() |>
dbscan(eps = 200, minPts = 20)
bike_theft_dbscan
theft_bike <- theft_bike |>
mutate(dbcluster = bike_theft_dbscan$cluster)
#| label: 03-dbscan-for-loop
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| cache: True
#| filename: 'R code'
# create an empty list to store the resulting convex hull geometries
# set the length of this list to the total number of clusters found
geometry_list <- vector(mode = 'list', length = max(bike_theft_london$dbcluster))
geometry_list <- vector(mode = 'list', length = max(theft_bike$dbcluster))
counter <-0
#| label: 03-dbscan-for-loop
#| classes: styled-output
#| echo: True
#| eval: True
#| tidy: True
#| cache: True
#| filename: 'R code'
# create an empty list to store the resulting convex hull geometries
# set the length of this list to the total number of clusters found
geometry_list <- vector(mode = 'list', length = max(theft_bike$dbcluster))
# create a counter to keep track
counter <-0
# begin loop
for (cluster_index in seq(0, max(theft_bike$dbcluster))) {
# filter to only return points for belonging to cluster n
theft_bike_subset <- theft_bike |>
filter(dbcluster == cluster_index)
# union points, calculate convex hull
cluster_polygon <- theft_bike_subset |>
st_union() |>
st_convex_hull()
# add the geometry of the polygon to our list
geometry_list[counter] <- (cluster_polygon)
# update the counter
counter <- counter + 1
}
# combine the list
theft_bike_clusters <- st_sfc(geometry_list, crs = 27700)
#| label: fig-03-map-clusters
#| fig-cap: DBSCAN-identified clusters of reported bicycle theft in London.
#| echo: True
#| eval: True
#| message: False
#| filename: "R code"
# shape, polygon
tm_shape(outline) +
# specify colours
tm_polygons(
col = '#f0f0f0',
) +
# shape, polygon
tm_shape(theft_bike_clusters) +
# specify colours
tm_polygons(
col = '#beaed4',
) +
# set layout
tm_layout(
frame = FALSE,
)
